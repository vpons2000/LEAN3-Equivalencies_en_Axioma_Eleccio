import TFG_VPL_Axiom_of_Choice TFG_VPL_set_theory_extra--TFG_VPL_Axiom_of_Choice 
open  Set empty functions AC_nodisj

universe u

variables {x y z t X Y Z T f g P ùïè: Set.{u}}
variables a b c A B   Q: Set.{u}
namespace previs

--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
--def Œ© (P:Set.{u}):set Set:={x:Set.{u}| x ‚àà P}
def Œ¶ (P:Set.{u}):set Set:={x:Set.{u}| x ‚äÜ P}

def œÄ {P:Set.{u}}(x : Set.{u}) (h1 : x ‚àà P) : P.to_set := subtype.mk x h1

def phi {P:Set.{u}}(X : Set.{u}) (h1 : X ‚äÜ P) : Œ¶ P := subtype.mk X h1
--notation ‚ü®x,h‚ü©:= phi x h 
notation ‚ü®x,h‚ü©:= œÄ x h 

namespace PO_lemmas
lemma phieq_val{P:Set.{u}}{X : Set.{u}} (h1 : X ‚äÜ P): (phi X h1).val = X:= congr_arg subtype.val rfl
lemma pieq_val {P:Set.{u}}{X : Set.{u}} (h1 : X ‚àà P): ‚ü®X,h1‚ü©.val = X:= congr_arg subtype.val rfl

lemma pieq {P:Set.{u}}{X : P.to_set}{hp:X.1‚àà P}: ‚ü®X.1,hp‚ü© = X:= subtype.eq (pieq_val X.2)

variables {l k s:P.to_set}[partial_order P.to_set]

lemma le_vals {h1: l.1‚àà P}{h2:k.1‚àà P}: ‚ü®l.1,h1‚ü©  ‚â§ ‚ü®k.1,h2 ‚ü© ‚Üí l ‚â§ k:=
begin
  intro h,
  have hl:‚ü®l.1,h1‚ü© =l, from pieq,have hk:‚ü®k.1,h2‚ü© =k, from pieq,
  have l_le_h1: l  ‚â§ ‚ü®k.1,h2 ‚ü©,exact (eq.symm hl).trans_le h,
  exact eq.trans_ge hk l_le_h1,
end

lemma vals_of_pieq_of_le {h1: k.1‚àà P}: l ‚â§ ‚ü®k.1,h1 ‚ü© ‚Üí l ‚â§ k:= Œªh , eq.trans_ge pieq h
lemma vals_of_le_of_pieq {h1: k.1‚àà P}: ‚ü®k.1,h1 ‚ü© ‚â§ l ‚Üí k ‚â§ l:= Œª h, (eq.symm pieq).trans_le h

lemma vals_of_pieq_of_lt {h1: k.1‚àà P}: l < ‚ü®k.1,h1 ‚ü© ‚Üí l < k:= Œªh , eq.trans_gt pieq h
lemma vals_of_lt_of_pieq {h1: k.1‚àà P}: ‚ü®k.1,h1 ‚ü© < l ‚Üí k < l:= Œª h, (eq.symm pieq).trans_lt h

lemma vals_of_pieq_of_lt_iff {h1: k.1‚àà P}: l < ‚ü®k.1,h1 ‚ü© ‚Üî l < k:= 
begin 
  split, exact Œªh , eq.trans_gt pieq h,
  exact Œª h, (eq.symm pieq).trans_gt h,
end


lemma lt_vals {h1: l.1‚àà P}{h2:k.1‚àà P}: ‚ü®l.1,h1‚ü©  < ‚ü®k.1,h2 ‚ü© ‚Üî l < k:=
begin 
  have hl:‚ü®l.1,h1‚ü© =l, from pieq,have hk:‚ü®k.1,h2‚ü© =k, from pieq,
  split, intro h,
  have l_lt_h1: l  < ‚ü®k.1,h2 ‚ü©,exact (eq.symm hl).trans_lt h,
  exact eq.trans_gt hk l_lt_h1,
  --
  intro h,
  have l_lt_h1: ‚ü®l.1,h1 ‚ü© < k ,exact eq.trans_lt hl h,
  exact (eq.symm hk).trans_gt l_lt_h1,
end

end PO_lemmas
#check P.to_set
#check P.to_set
#check set.mem_set_of.mpr

namespace Order

--class defined_partial_order (Œ±:Type u)(hle:Œ± ‚Üí Œ± ‚Üí Prop) extends partial_order Œ±:=
--(le_def: ‚àÄ (a b:Œ±), a ‚â§ b ‚Üî hle a b)

structure PartialOrderInstance :=
  (Œ± : Type u)
  (le : Œ± ‚Üí Œ± ‚Üí Prop)
  (partial_order_proof : partial_order Œ±)


-----------------------------------------------------------------------------------------

--lemma le_def (Œ±:Type)(hle:Œ± ‚Üí Œ± ‚Üí Prop)[defined_partial_order Œ± hle]: ‚àÄ {a b:Œ±}, a ‚â§ b ‚Üî hle a b:= (Œª a b, defined_partial_order.le_def a b)

variable [partial_order (P.to_set)]
variable [partial_order (Q.to_set)]

--definim la condici√≥ de ser cadena
def is_chain (C:Œ¶ P):Prop:= ‚àÄ (x y : Set.{u}) (h1:x‚ààC.1) (h2:y‚ààC.1), ‚ü®x,C.2 h1‚ü©  ‚â§ ‚ü®y,C.2 h2‚ü© ‚à® ‚ü®y,C.2 h2‚ü© ‚â§ ‚ü®x,C.2 h1‚ü©
--definim el conjunt de cadenes

def chains :Set.{u}:= {C ‚àà powerset Q |‚àÉ(h1:C‚äÜQ), is_chain (phi C h1)}

--definim suprem o cota superior
def suprem (s :P.to_set)(X:Œ¶ P):Prop:=‚àÄ(x:Set.{u})(h1:x ‚àà X.1), ‚ü®x, (X.2 h1)‚ü©  ‚â§ s
notation s `suprem_de` X:= suprem s X

--Element maximal
def element_maximal (M:P.to_set) :Prop:=  ‚àÄx:P.to_set , M ‚â§ x ‚Üí M = x 
lemma not_maximal_to_lt {s:P.to_set}: ¬¨ (element_maximal s) ‚Üí ‚àÉx:P.to_set,s < x:=
begin
  intro notMax,by_contra,
  have s_max:element_maximal s, intros x hx, by_contra s_neq_x,
    have s_lt_x:s<x, from ne.lt_of_le s_neq_x hx,
    exact h (exists.intro x s_lt_x),
  exact notMax s_max,
end

--M√≠nim d'un conjunt
def minim_of_set (A:Œ¶ P)(m:P.to_set)(hm:m.1 ‚àà A.1):=‚àÄ(x:Set.{u})(hx:x ‚àà A.1), m ‚â§ ‚ü®x, A.2 hx‚ü© 

--Conjunt inferior a un element
def Cv (C: Œ¶ P){x:Set.{u}}(hx:x‚àà C.1):Set.{u}:={y ‚àà C.1 | ‚àÉ(hy:y‚ààC.1),‚ü®y,C.2 hy‚ü©  < ‚ü®x,C.2 hx‚ü©}
notation C`‚Üì`hx:=Cv C hx 

--conjunt de suprems d'un conjunt
def Upp (C: Œ¶ P) : Set.{u}:={x‚àà P| ‚àÉ(hx:x‚ààP),‚àÄ(y:Set.{u})(hy:y‚ààC.1), ‚ü®y, C.2 hy‚ü©  < ‚ü®x,hx‚ü©}
---------------------------------------------------------------------------------------------------
lemma Cv_ss_C {C: Œ¶ P}{x:Set.{u}}{hx:x‚àà C.1}: (C‚Üìhx)‚äÜ C.1:=Œª y hy, (mem_sep.mp hy).left
lemma Cv_ss_P {C: Œ¶ P}{x:Set.{u}}{hx:x‚àà C.1}: (C‚Üìhx)‚äÜ P:= previs.subset_trans (Cv_ss_C) C.2

lemma mem_cv {C: Œ¶ P}{x:Set.{u}}{hx:x‚àà C.1}{w:Set.{u}}: w ‚àà (C‚Üìhx) ‚Üî (‚àÉ(h1:w‚ààC.1),‚ü®w, C.2 h1‚ü© < ‚ü®x,C.2 hx‚ü©):=
begin
  split, intro h,exact (mem_sep.mp h).right,
  intro h,apply mem_sep.mpr,rcases h with ‚ü®w_in_C,w_lt_x‚ü©, split, exact (w_in_C), exact exists.intro w_in_C w_lt_x, 
end

open previs.PO_lemmas

lemma cv_is_cad_of_cad {C: Œ¶ P}{x:Set.{u}}(cadC:is_chain C){hx:x‚àà C.1}:is_chain (phi (C‚Üìhx) Cv_ss_P):=
begin
  intros a b ha hb,
  have heq: (phi (C‚Üìhx) Cv_ss_P).val = (C‚Üìhx), from phieq_val Cv_ss_P,
  have a_in_C:a‚àà C.1, from (mem_sep.mp (mem_of_eq_of_set heq ha)).left,
  have b_in_C:b‚ààC.1, from (mem_sep.mp (mem_of_eq_of_set heq hb)).left,
  exact cadC a b a_in_C b_in_C,
end



lemma diffsubtype (A B:Œ¶ P):(A.1\B.1)‚äÜP:=Œª w hw, A.2 (mem_diff.mp hw).left 

end Order
end previs
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
open previs previs.Order 
--PreLema de Zorn-
def preZorn (P:Set.{u})(hpo:partial_order (P.to_set)):Prop:=
(Set_nonempty P) ‚àß 
(‚àÄ (C:Œ¶ P),(C.1 ‚àà chains P) ‚Üí (Set_nonempty C.1)  ‚Üí (‚àÉ s :P.to_set , suprem s C))
‚Üí ‚àÉ (M : P.to_set), element_maximal M
--Lema de Zorn--
def Zorn:Prop:=‚àÄ(P:Set.{u})(hpo:partial_order (P.to_set)),preZorn.{u} P hpo

------------------------------------------------------------------------------------------------------
-------------------------------------------Zorn ‚Üí AC--------------------------------------------------
------------------------------------------------------------------------------------------------------
namespace preAC
  --definim la condici√≥ de ser cadena
  def is_chain2 (P:Set.{u})(h:partial_order (P.to_set)) (C:Œ¶ P):Prop:= ‚àÄ {x y : Set.{u}} (h1:x‚ààC.1) (h2:y‚ààC.1), ‚ü®x,C.2 h1‚ü©  ‚â§ ‚ü®y,C.2 h2‚ü© ‚à® ‚ü®y,C.2 h2‚ü© ‚â§ ‚ü®x,C.2 h1‚ü©
  def chains2 (P:Set.{u})(h:partial_order (P.to_set)) :Set.{u}:= {C ‚àà powerset P |‚àÉ(h1:C‚äÜP), is_chain2 P h (phi C h1)}

  --definim suprem o cota superior
  def suprem2 (P:Set.{u})(hpo:partial_order (P.to_set))(s :P.to_set)(X:Œ¶ P):Prop:=‚àÄ(x:Set.{u})(h1:x ‚àà X.1), ‚ü®x, (X.2 h1)‚ü©  ‚â§ s

  --Element maximal
  def element_maximal2 (P:Set.{u})(hpo:partial_order (P.to_set))(M:P.to_set) :Prop:=  ‚àÄx:P.to_set , M ‚â§ x ‚Üí M = x 


  lemma L1 (hpo:partial_order (P.to_set)){M Q:P.to_set}(h2:element_maximal2 P hpo M) (h3:M‚â§ Q) :M.1=Q.1:=
  begin
    have h5, from (h2 Q h3), exact congr_arg subtype.val (h2 Q h3),
  end

  def P_ (ùïè:Set.{u}) :Set.{u}:= {Z‚àà (powerset ùïè).prod (powerset (ùïè.prod ùïè.sUnion))| ‚àÉ ùïê G:Set.{u}, G‚àà(ùïê.funs ùïê.sUnion) ‚àß (‚àÄ{x y:Set.{u}}, x.pair y ‚àà G ‚Üí y‚àà x) ‚àß  Z=ùïê.pair G}

  def hle_ (P:Set.{u}):(P.to_set) ‚Üí(P.to_set) ‚Üí Prop:=Œª a b, ‚àÉ(X Y G H:Set.{u}),
    (X ‚äÜ Y) 
    ‚àß (G ‚äÜ H)
    ‚àß (X.pair G = a.1 ‚àß  Y.pair H = b.1)

  ---------------------------------


  lemma hle_antisymm :‚àÄ (a b : ((P_ ùïè).to_set)), hle_ (P_ ùïè) a b ‚Üí hle_ (P_ ùïè) b a ‚Üí a = b:=
  begin intros a b hab hba,
    have a_eq_b:a.1=b.1,
    rcases hab with ‚ü® X1, Y1, G1, H1, hab1,hab2,hab3‚ü©,
      rcases hba with ‚ü® Y2, X2, H2, G2, hba1,hba2,hba3‚ü©,
      --aleshores, com, tenim que X1=a.1=X2 i Y1 = b.1 =Y2  i Y1 = Y2 ‚àß H1 = H2
      have ha1:X1 = X2 ‚àß G1 = G2, from pair_inj.mp (eq.trans hab3.left hba3.right.symm),
      have ha2:Y1 = Y2 ‚àß H1 = H2,from pair_inj.mp (eq.trans hab3.right hba3.left.symm),
      --aleshores com X1‚äÜY1 i Y2‚äÜ X2
      have X_eq_Y:X1=Y1,
        have Y_ss_X:Y1‚äÜ X1,from (calc
        Y1  = Y2 : ha2.left
        ... ‚äÜ X2 : hba1
        ... = X1 : ha1.left.symm
        ),
        exact eq_of_subsets hab1 Y_ss_X,
      --ara demostrem que G=H
      have G_eq_H:G1=H1,
        have H_ss_G:H1‚äÜ G1,from (calc
        H1  = H2 : ha2.right
        ... ‚äÜ G2 : hba2
        ... = G1 : ha1.right.symm
        ),
        exact eq_of_subsets hab2 H_ss_G,
      --aleshores com tenim que X1=Y1 i G1=H1, tenim que a.1=X.pair G=Y.pair H=b.1
      exact (calc
        a.1 = X1.pair G1 : hab3.left.symm
        ... = Y1.pair H1 : pair_inj.mpr (and.intro X_eq_Y G_eq_H)
        ... = b.1        : hab3.right
      ),
    --aleshores tenim que compleix la propietat antisim√®trica
    exact subtype.eq a_eq_b,  
  end

  lemma hle_refl:‚àÄ (a : ((P_ ùïè).to_set)),hle_ (P_ ùïè) a a:=
  begin
    intro a, cases a with a a_in_P,
    --com a ‚àà P, aleshores [ a‚àà (powerset ùïè).prod (ùïè.prod ùïè.sUnion) ] ‚àß [ ‚àÉ ùïê G:Set.{u}, G‚àà(ùïê.funs ùïê.sUnion) ‚àß a=ùïê.pair G ] 
    have ha,from (mem_sep.mp a_in_P).left, rcases mem_prod.mp ha with ‚ü®a1,ha1,a2,ha2,ha3‚ü©, 
    --aleshores tenim que es compleix
    have a_ss:a‚äÜa, from previs.subset_of_eq rfl,
    exact exists.intro a1 (exists.intro a1 ( exists.intro a2 (exists.intro a2 ( and.intro (previs.subset_of_eq rfl) ( and.intro (previs.subset_of_eq rfl) (and.intro ha3.symm ha3.symm)))))), 
  end

  lemma hle_trans:‚àÄ (a b c: ((P_ ùïè).to_set)),hle_ (P_ ùïè) a b ‚Üí hle_ (P_ ùïè) b c ‚Üíhle_ (P_ ùïè) a c:=
  begin
    intros a b c hab hbc, 
    rcases hab with ‚ü®X, Y1, G, H1,hab1,hab2,hab3‚ü©,
    rcases hbc with ‚ü®Y2, Z, H2, F,hbc1,hbc2,hbc3‚ü©,
    have ha:Y1 = Y2 ‚àß H1 = H2,from pair_inj.mp (eq.trans hab3.right hbc3.left.symm),
    --tenim en primer lloc que Y1 = Y2 ‚àß H1=H2
    have YH_eq: Y1 = Y2 ‚àß H1=H2, from pair_inj.mp (eq.trans hab3.right hbc3.left.symm),
    --estem en condicions de demostrar que ‚â§ √©s transitiva
    have htrans:(X ‚äÜ Z) ‚àß (G ‚äÜ F) ‚àß (X.pair G = a.1 ‚àß  Z.pair F = c.1),
    -- ‚ä¢ X ‚äÜ Z
      split,exact previs.subset_trans hab1 (previs.subset_trans (previs.subset_of_eq ha.left ) hbc1),split,
    -- ‚ä¢ G  ‚äÜ F
      exact previs.subset_trans hab2 (previs.subset_trans (previs.subset_of_eq ha.right ) hbc2),
      exact and.intro hab3.left hbc3.right,
    exact exists.intro X (exists.intro Z (exists.intro G (exists.intro F (htrans)))),  
  end 
  ---------------------------------

  def myPartialOrderInstance (ùïè:Set.{u}) : PartialOrderInstance :=
  {
    Œ± := ((P_ ùïè).to_set),
    le:= hle_ (P_ ùïè),
    partial_order_proof:= {
      le:= hle_ (P_ ùïè),
      le_antisymm:= hle_antisymm,
      le_refl:=hle_refl,
      le_trans:=hle_trans
    }
  }
  #print myPartialOrderInstance
    
  lemma Pne (hùïèE:ùïè‚â† (‚àÖ:Set.{u}))(ùïè_props: ‚àÖ ‚àâ ùïè) : (P_ ùïè).nonempty:=
  begin
    --com ùïè no √©s buit tenim que existeix algun element X de ùïè
      have ùïène:Set_nonempty ùïè, from nonempty_iff_notEmpty.mpr hùïèE, cases ùïène with X hX,
      --ara com X‚àà ùïè ‚Üí ‚àÉx ‚àà X
      have Xne:Set_nonempty X, from xne_of_XhasNoE_of_xinX ùïè_props hX, cases Xne with x hx,
      --aleshores definim l'aplicaci√≥ J:{X}‚Üí {X}.sUnion; J(X) = x
      set J:Set.{u}:={X.pair x},set X_:Set.{u}:={X},
      --demostrem que est√† ben definida
      
      have hJ:J‚àà funs X_ X_.sUnion, apply mem_sep.mpr , 
        --primer demostrem que hXX : X‚àà {X}
          have hXX:X‚àà X_,exact mem_singleton.mpr rfl,
        --demostrem hxX: x‚àà {X}.sUnion
          have hxX:x‚àà X_.sUnion, exact mem_sUnion.mpr (exists.intro X (exists.intro (mem_singleton.mpr rfl) hx)),
        --J‚äÜ {X}.prod {X}.sUnion
        have hJ:J‚äÜ X_.prod X_.sUnion,
          intros w hw,-- tenim que w‚ààJ={X.pair x} ‚Üí w = X.pair x
          --demostrem que X.pair x ‚àà {X}.prod {X}.sUnion
          have hXx_in_XUX:X.pair x ‚àà X_.prod X_.sUnion, exact pair_mem_prod.mpr (and.intro hXX hxX),
          --aleshores tenim w= X.pair x ‚àà {X}.prod {X}.sUnion
          exact mem_of_eq_of_mem (mem_singleton.mp hw).symm hXx_in_XUX,
        split,
          exact mem_powerset.mpr hJ,split, exact hJ,
          --‚ä¢ ‚àÄx:Set, x‚àà {X}‚Üí ‚àÉ! w:Set, z.pair w‚àà J
          intros z hz, split,split, exact mem_of_eq_of_mem_left (mem_singleton.mp hz).symm (mem_singleton.mpr rfl),
            --‚ä¢‚àÄw:Set, z.pair w‚àà J ‚Üí w=x
            intros w hw, exact (pair_inj_right (mem_singleton.mp hw)),
      --ja hem demostrat que est√† ben definida, vegem que ({X},J) ‚àà P
      have XY_in_P1:X_.pair J ‚àà (powerset ùïè).prod (powerset (ùïè.prod ùïè.sUnion)), apply pair_mem_prod.mpr,split,
      --‚ä¢ {X}‚àà (powerset ùïè)
        have h2: {X}‚äÜ ùïè, intros w hw, exact mem_of_eq_of_mem (mem_singleton.mp hw).symm hX,
        exact mem_powerset.mpr h2,
      --‚ä¢{X.x} = J ‚äÜ (ùïè.prod ùïè.sUnion)
        --tenim que w ‚àà {X.x}‚Üí w = X.x ‚àà ùïè.prod ùïè.sUnion
        have Xx_in_XUX:X.pair x ‚àà ùïè.prod ùïè.sUnion, from pair_mem_prod.mpr (and.intro hX (mem_sUnion.mpr (exists.intro X (exists.intro hX hx)))),
        exact mem_powerset.mpr (Œª w hw, (mem_of_eq_of_mem (mem_singleton.mp hw).symm Xx_in_XUX)),
      --‚ä¢ ‚àÄ (x y : Set), x.pair y ‚àà J ‚Üí y ‚àà x
        have hcf:‚àÄ (x y : Set), x.pair y ‚àà J ‚Üí y ‚àà x, intros w y hwy, 
        --aleshores com (w,y)=(X,x), i tenim que y=x ‚àà X=w,
        have h1:w = X ‚àß y = x,from pair_inj.mp (mem_singleton.mp hwy),
        exact mem_of_eq_of_mem h1.right.symm (mem_of_eq_of_set h1.left.symm hx), 
      --Aleshores tenim que {X}.pair J ‚àà P
      have XJ_in_P: (X_.pair J)‚àà P_ ùïè, exact mem_sep.mpr (and.intro XY_in_P1 (exists.intro X_ (exists.intro J (and.intro hJ (and.intro hcf rfl))))),
      exact exists.intro (X_.pair J) XJ_in_P,
    -- Hem demostrat que P no √©s buit 
  end

  def hpo (ùïè:Set.{u}):=(myPartialOrderInstance ùïè).partial_order_proof

  lemma PWO {ùïè:Set.{u}} : ‚àÄ (C:Œ¶ (P_ ùïè)),(C.1 ‚àà (chains2 (P_ ùïè) (hpo ùïè)) ‚Üí (Set_nonempty C.1)  ‚Üí (‚àÉ s : (P_ ùïè).to_set , suprem2 (P_ ùïè) (hpo ùïè) s C)):=
  begin
    --siga C una cadena no buida de P
    intros C C_chain C_ne,
    --definim Z com a la uni√≥ de totes les primeres components de C
    set ùíµ:Set.{u}:= {Y‚ààùïè | ‚àÉùïê G:Set.{u}, (ùïê.pair G ‚àà C.1) ‚àß (Y ‚àà ùïê)},
    set ùí¢:Set.{u}:= {Z‚àà ùïè.prod ùïè.sUnion | ‚àÉ X Y G ùïê :Set.{u}, (X‚àà ùïê) ‚àß (X.pair Y ‚àà G) ‚àß (ùïê.pair G ‚àà C.1)  ‚àß Z=X.pair Y},
    --demostrem que ùí¢ ‚àà funs ùíµ ùíµ.sUnion
    have G_fun_Z: ùí¢ ‚àà ùíµ.funs ùíµ.sUnion, apply mem_sep.mpr, 
      --ùí¢‚àà (ùíµ.prod ùíµ.sUnion).powerset
      have hG:ùí¢ ‚äÜ ùíµ.prod ùíµ.sUnion,
        intros w hw, 
        --tenim que existeixen X Y G ùïê tal que (X‚àà ùïê) ‚àß (X.pair y ‚àà G) ‚àß (ùïê.pair G ‚àà C.1)  ‚àß (w = X.pair y)
        have hG:‚àÉ X Y G ùïê :Set.{u}, (X‚àà ùïê) ‚àß (X.pair Y ‚àà G) ‚àß (ùïê.pair G ‚àà C.1)  ‚àß w=X.pair Y, from (mem_sep.mp hw).right, rcases hG with ‚ü®X,y,G,ùïê,hG1,hG2,hG3,hG4‚ü©,
        --vegem que (ùïê,G)‚àà C ‚äÜ P ‚Üí 
        --  ùïê.pair G ‚àà (powerset ùïè).prod (powerset (ùïè.prod ùïè.sUnion)) ‚àß 
        --  ( ‚àÉ ùïê2 G2, (G2 ‚àà (ùïê2.funs ùïê2.sUnion)) ‚àß (ùïê.pair G = ùïê2.pair G2) )
        have YG_in_P: ùïê.pair G ‚àà (P_ ùïè), exact C.2 hG3, rcases (mem_sep.mp YG_in_P) with ‚ü® hùïêG,ùïê2,G2, hP1, hP2,hP3 ‚ü©,
        --vegem que X.pair y ‚àà ùíµ.prod ùíµ.sUnion
        have hXY: X.pair y ‚àà ùíµ.prod ùíµ.sUnion, apply pair_mem_prod.mpr,
        --‚ä¢ X‚àà ùíµ
          --en primer lloc sabem que ùïê = ùïê2
          have Y2Y:ùïê=ùïê2, from pair_inj_left hP3,
          --Ara, tamb√© tenim qeu ùïê ‚äÜ ùïè
          have Y_ss_X:ùïê‚äÜ ùïè, from mem_powerset.mp (pair_mem_prod_left hùïêG),
          --com X‚àà ùïê tenim que X‚ààùïè, ja que (ùïê,G)‚àà C ‚äÜ P ‚àß X ‚àà ùïê ‚äÜ ùïè ‚Üê ùïê2 ‚àà ùí´(ùïè) 
          have X_in_ùïè:X‚àà ùïè, exact  Y_ss_X hG1,split,
          --aleshores ja tenim que X‚àà ùíµ
          exact mem_sep.mpr (and.intro X_in_ùïè (exists.intro ùïê (exists.intro G (and.intro hG3 hG1)))),
        --‚ä¢ y‚àà ùíµ.sUnion
          --com G=G2 ‚àà (ùïê2.funs ùïê2.sUnion) ‚äÜ ( ùïê2.prod ùïê2.sUnion ).powerset ‚Üí 
          have G_ss_YY:G ‚äÜ  ùïê2.prod ùïê2.sUnion, from (mem_sep.mp (mem_of_eq_of_mem (pair_inj_right hP3).symm hP1)).right.left,
          --aleshores X.pair y‚àà G ‚äÜ ùïê2.prod ùïê2.sUnion ‚Üí y ‚àà ùïê2.sUnion = ùïê.sUnion
          have Y_in_UX:y ‚àà ùïê.sUnion, exact mem_of_eq_of_set (eq_sUnion (pair_inj_left hP3).symm) (pair_mem_prod_right (G_ss_YY hG2)), rcases (mem_sUnion.mp Y_in_UX) with ‚ü®Y,hY,hy‚ü©,   
          --per tant tenim que ‚àÉ(Y ‚àà ùïê), y ‚àà Y, aleshores demostrem que Y‚àà ùíµ
          have Y_in_Z:Y ‚àà ùíµ, from mem_sep.mpr (and.intro (Y_ss_X hY) (exists.intro ùïê (exists.intro G (and.intro hG3 hY)))),
          --aleshores tenim que y‚àà ùíµ.sUnion
          exact mem_sUnion.mpr (exists.intro Y (exists.intro Y_in_Z hy)),
        exact mem_of_eq_of_mem hG4.symm hXY,
      split, exact mem_powerset.mpr hG,split, exact hG,
      --demostrem que est√† ben definida G: ‚àÄz‚àà ùíµ, ‚àÉ!w, z.pair w ‚àà ùí¢
      intros z hz, 
      --Ara com z‚ààùíµ,tenim que ( z‚àà ùïè ) ‚àß  ‚àÉ ùïê G, (ùïê.pair G ‚àà C.1) ‚àß (z ‚àà ùïê)
      rcases ( mem_sep.mp hz ) with ‚ü® hz0 , ùïê , G , hz1 , hz2 ‚ü©,
      --Aleshores com z‚àà ùïê i (ùïê,G)‚àà C.1 ‚äÜ P, aleshores tenim que existeixen  ùïê2 G2, G2‚àà ùïê2.funs ùïê2.sUnion ‚àß (ùïê,G)=(ùïê2,G2)
      have hYG, from (mem_sep.mp (C.2 hz1)), rcases hYG with ‚ü®C0, ùïê2, G2, hG2,CFG2,hYG‚ü©,
      --com G2 ‚àà ùïê2.funs ùïê2.sUnion i x‚ààùïê=ùïê2  aleshores existeix un √∫nic y‚àà ùïê2.sUnion, (x,y)‚ààG2=G
      have hy, from ((mem_sep.mp hG2).right.right z (mem_of_eq_of_set (pair_inj_left hYG) hz2)), rcases  hy with ‚ü®y,hy,yuniq‚ü©,
      --aleshores z.pair y‚àà G2=G
      have hzy1: z.pair y‚ààG, from (mem_of_eq_of_set (pair_inj_right hYG).symm hy),
      --ara, provem que z.pair y‚àà ùïè.prod ùïè.sUnion, ja que z.pair y‚àà 
      have hy2:z.pair y‚ààùïè.prod ùïè.sUnion,
        --en primer lloc tenim que G‚äÜ 
        --primer com que z.pair y‚àà G2 ‚àà funs ùïê2 ùïê2.sUnion, tenim que y‚àà ùïê2.sUnion
        have hy2:y‚àà ùïê2.sUnion, from (pair_mem_prod_right ((mem_sep.mp hG2).right.left hy)),
        --aleshores, com ùïê2=ùïê‚äÜ ùïè, tenim que y‚àà Uùïê2 = Uùïê ‚äÜ Uùïè
        have hy3: y‚àà ùïè.sUnion, from (subset_sUnion (mem_powerset.mp (pair_mem_prod_left C0))) (mem_of_eq_of_set (eq_sUnion (pair_inj_left hYG).symm) hy2),
        --aleshores ja estem en condicions per demostrar que z.pair y‚ààùïè.prod ùïè.sUnion
        exact pair_mem_prod.mpr (and.intro hz0 hy3),
      --aleshores ja estem en condicions de provar que z.pair y‚àà ùí¢
      have hzy2:(z.pair y)‚ààùí¢, from (mem_sep.mpr (and.intro hy2 (exists.intro z (exists.intro y (exists.intro G (exists.intro ùïê (and.intro hz2 (and.intro (mem_of_eq_of_set (pair_inj_right hYG).symm hy) (and.intro hz1 rfl))))))))),
      --aleshores existeix un w tal que z.pair w ‚àà ùí¢
      split,split, exact hzy2,
      --nom√©s cal demostrar que √©s √∫nic. Suposem que hi ha un w tal que z.pair w‚àà ùí¢, volem demostrar que w=y, aleshores ‚àÉ z0 w0 G0 ùïê0 tal que z0 ‚àà ùïê0 ‚àß z0.pair w0 ‚àà G0 ‚àß ùïê0.pair G0 ‚àà C.val ‚àß z.pair w = z0.pair w0
        intros w hw, rcases (mem_sep.mp hw) with ‚ü®zw_in_XX,z0,w0,G0,ùïê0,hz0, zw0_in_G0,YG0_in_C, h0 ‚ü©,
        --Ara com (ùïê0,G0)‚àà C.1, i C √©s cadena, tenim que, o b√©  (ùïê0,G0)‚â§ (ùïê,G) o (ùïê,G) ‚â§ (ùïê0,G0)
        rcases (mem_sep.mp C_chain) with ‚ü®C_in_P,C_in_Q, hcchain‚ü©,
        specialize hcchain YG0_in_C hz1,
        cases hcchain,
        --si hcchain:(ùïê0,G0)‚â§ (ùïê,G) aleshores 
          --have hYG0_le_YG, from hpo_le_def.mp hcchain, 
          rcases hcchain with ‚ü®A0,A,B0,B,A0_le_A, B0_le_B, AB_eq_YG‚ü©,
          --ara com tenim que A0.pair B0 = (ùïê0,G0) i A.pair B = (ùïê,G) obtenim
          have le_eq:(A0=ùïê0 ‚àß B0=G0) ‚àß (A=ùïê ‚àß B = G ), from and.intro (pair_inj.mp AB_eq_YG.left) (pair_inj.mp AB_eq_YG.right),
          --aleshores com estem suposant que z,w = z,w0‚àà G0 = B0 ‚äÜ B = G = G2,
          have G0_ss_G2:G0‚äÜ G2, intros a ha, exact mem_of_eq_of_set (eq.trans le_eq.right.right (pair_inj_right hYG))  (B0_le_B (mem_of_eq_of_set le_eq.left.right.symm ha)),
          have w_in_G2: z.pair w ‚àà G2,exact mem_of_eq_of_mem h0.symm (G0_ss_G2 zw0_in_G0),
          --aleshores tenim que w = y
          exact yuniq w w_in_G2,
        --si hcchain:(ùïê,G) ‚â§ (ùïê0,G0) aleshores
          rcases hcchain with ‚ü®A,A0,B,B0,A_le_A0, B_le_B0, AB_eq_YG‚ü©,
          --ara com tenim que A0.pair B0 = (ùïê0,G0) i A.pair B = (ùïê,G) obtenim
          have le_eq:(A0=ùïê0 ‚àß B0=G0) ‚àß (A=ùïê ‚àß B = G ), from and.intro (pair_inj.mp AB_eq_YG.right) (pair_inj.mp AB_eq_YG.left),
          --Aleshores z.pair y ‚àà G=B ‚äÜ B0 = G0
          have zy_in_G0:z.pair y ‚àà G0, from mem_of_eq_of_set le_eq.left.right (B_le_B0 (mem_of_eq_of_set le_eq.right.right.symm hzy1)),
          --aleshores com ùïê0.pair G0 ‚ààC ‚äÜ   P ‚Üí ‚àÉùïê1 G1, G1‚àà(ùïê1.funs ùïê1.sUnion) ‚àß (‚àÄx y:Set.{u}, x.pair y ‚àà G1 ‚Üí y‚àà x) ‚àß  ùïê0.pair G0 = ùïê1.pair G1
          have ùïêG0_in_P:ùïê0.pair G0 ‚àà (P_ ùïè), from C.2 YG0_in_C,rcases (mem_sep.mp ùïêG0_in_P).right with ‚ü® ùïê1, G1, G1func, CFG, h1eq‚ü©,
          --aleshores com ùïê0.pair G0 = ùïê1.pair G1
          have h1eq:ùïê0=ùïê1 ‚àß G0 = G1, from pair_inj.mp h1eq,
          --aleshores, com z.pair y‚àà G0 = G1 ‚àà ùïê1.funs ùïê1 
          have zy_in_G1:z.pair y ‚àà G1, from mem_of_eq_of_set h1eq.right zy_in_G0,
          --com z.pair y ‚àà G1‚äÜ ùïê1.funs ùïê1 ‚äÜ ùïê1.prod ùïê1.sUnion ‚Üí z‚àà ùïê1
          have z_in_Y1:z‚ààùïê1, from pair_mem_prod_left ((mem_sep.mp G1func).right.left zy_in_G1),
          --aleshores, com z‚àà ùïê1, ‚àÉ!w1, z.pair w1‚àà G1
          have hz1uniq, from ((mem_sep.mp G1func).right.right z z_in_Y1), rcases hz1uniq with ‚ü®w1, hw1, w1uniq ‚ü©,
          --aleshores, com z.pair y ‚àà G1, y= w1
          have y_eq_w1: y=w1, from w1uniq y zy_in_G1,
          --tamb√© tenim que z.pair w = z.pair w0 ‚àà G0 = G1
          have zw_in_G1:z.pair w ‚àà G1, exact mem_of_eq_of_set h1eq.right (mem_of_eq_of_mem h0.symm zw0_in_G0),
          --aleshores tenim que w=w1
          have w_eq_w1: w=w1, from w1uniq w zw_in_G1,
          --aleshores tenim que w = w1 = y
          exact eq.trans w_eq_w1 y_eq_w1.symm,
    --ja hem demostrat que ùí¢ √©s una funci√≥, 
    
    --demostrem que √©s funci√≥ d'elecci√≥
    have CFG:(‚àÄx y:Set.{u}, x.pair y ‚àà ùí¢ ‚Üí y‚àà x), intros X x hXx_in_G,
      --aleshores, com (X,x)‚àà ùí¢, ‚àÉ Y y G ùïê :Set.{u}, (Y‚àà ùïê) ‚àß (Y.pair y ‚àà G) ‚àß (ùïê.pair G ‚àà C.1)  ‚àß X.pair x = Y.pair y
      rcases (mem_sep.mp hXx_in_G).right with ‚ü®Y, y, G, ùïê, Y_in_ùïê, Yy_in_G, YG_in_C, heq ‚ü©,
      --aleshores, com  ùïê.pair G ‚àà C.1 ‚äÜ P ‚Üí ‚àÉ ùïêP GP:Set.{u}, GP‚àà(ùïêP.funs ùïêP.sUnion) ‚àß (‚àÄx y:Set.{u}, x.pair y ‚àà GP ‚Üí y‚àà x) ‚àß  ùïê.pair G=ùïêP.pair GP
      rcases (mem_sep.mp (C.2 YG_in_C)).right with ‚ü® ùïêP,GP, GPfuns, CFGP, heqP ‚ü©,
      --aleshores com  X.pair x= Y.pair y ‚àà G = GP
      have Xx_in_GP:X.pair x ‚àà GP, from mem_of_eq_of_set (pair_inj_right heqP) (mem_of_eq_of_mem heq.symm Yy_in_G),
      --per tant, x‚àà X
      exact CFGP Xx_in_GP,
    --queda provat que √©s una funci√≥ d'elecci√≥

    --Ara, provem que ùíµ.pair ùí¢ ‚àà (powerset ùïè).prod (powerset (ùïè.prod ùïè.sUnion))
    have ZG_in_PXPXUX:ùíµ.pair ùí¢ ‚àà (powerset ùïè).prod (powerset (ùïè.prod ùïè.sUnion)), 
      have Z_in_PX: ùíµ ‚äÜ ùïè, intros z hz, exact (mem_sep.mp hz).left,
      have G_in_PXUX:ùí¢ ‚äÜ ùïè.prod ùïè.sUnion, intros w hw, exact (mem_sep.mp hw).left,
      exact pair_mem_prod.mpr (and.intro (mem_powerset.mpr Z_in_PX) (mem_powerset.mpr G_in_PXUX)),
    --aleshores obtenim que (ùíµ,ùí¢)‚àà P

    have ZG_in_P: ùíµ.pair ùí¢ ‚àà (P_ ùïè), from mem_sep.mpr (and.intro ZG_in_PXPXUX (exists.intro ùíµ (exists.intro ùí¢ (and.intro G_fun_Z (and.intro CFG rfl))))),
    --aleshores, com ZG‚àà P tenim que ZG √©s suprem de C
    have ZGsup: suprem2 (P_ ùïè) (hpo ùïè) ‚ü®ùíµ.pair ùí¢ ,ZG_in_P‚ü©  C, intros x hx,
      --volem demostrar que ‚ü®x, (C.2 hx)‚ü©  ‚â§ ‚ü®ùíµ.pair ùí¢ ,ZG_in_P‚ü©
      --com x ‚àà P, aleshores x‚ààùïè.powerset.prod (ùïè.prod ùïè.sUnion).powerset ‚àß ‚àÉùïê G:Set.{u}, G‚àà(ùïê.funs ùïê.sUnion) ‚àß (‚àÄ{x y:Set.{u}}, x.pair y ‚àà G ‚Üí y‚àà x) ‚àß  x=ùïê.pair G
      rcases (mem_sep.mp (C.2 hx)) with ‚ü®hx0, ùïê,G,Gfunc,CFG, heq ‚ü©,
      -- ùïê.prod G ‚äÜ ùïè.prod (ùïè.prod ùïè.sUnion), ja que ùïê.prod G = x ‚àà ùïè.powerset.prod (ùïè.prod ùïè.sUnion).powerset
        have YG_ss_XXUX:ùïê.pair G ‚àà ùïè.powerset.prod (ùïè.prod ùïè.sUnion).powerset, from mem_of_eq_of_mem heq hx0,
        have YssX_GssUX: ùïê ‚àà  ùïè.powerset ‚àß G‚àà (ùïè.prod ùïè.sUnion).powerset , from (pair_mem_prod.mp YG_ss_XXUX),
      -- ùïê ‚äÜ ùíµ --
      have Y_ss_Z:ùïê ‚äÜ ùíµ, intros w hw,
          --tenim que ùïê.pair G = x‚àà C.1
          have YG_in_C: ùïê.pair G‚ààC.1, from mem_of_eq_of_mem heq hx,
          --aleshores ùïê.prod G ‚äÜ ùïè.powerset.prod (ùïè.prod ùïè.sUnion).powerset ‚Üí ùïê ‚äÜ ùïè
          have Y_ss_X:ùïê ‚äÜ ùïè, from mem_powerset.mp YssX_GssUX.left,
          --aleshores ja hem obt√©s que w‚àà ùíµ
          exact mem_sep.mpr (and.intro (Y_ss_X hw) (exists.intro ùïê (exists.intro G (and.intro YG_in_C hw)))),
      -- G ‚äÜ ùí¢ --
      have G_ss_Z: G ‚äÜ ùí¢,intros w hw,
          --primer tenim que G ‚äÜ  ùïè.prod ùïè.sUnion
          have G_in_XUX:G ‚äÜ ùïè.prod ùïè.sUnion, from mem_powerset.mp YssX_GssUX.right,
          --ara, com G‚ààùïê.prod ùïê.funs, tenim que w ‚àà G ‚äÜ ùïê.prod ùïê.sUnion
          have w_in_YUY:w‚àà ùïê.prod ùïê.sUnion, from (mem_sep.mp Gfunc).right.left hw,
          --aleshores tenim que ‚àÉa,b / a.pair b = a
          rcases (mem_prod.mp w_in_YUY) with ‚ü®a, ha, b, hb, ab_eq_w ‚ü©,
          --aleshores tenim que w‚àà ùí¢
          exact mem_sep.mpr (and.intro (G_in_XUX hw) (exists.intro a (exists.intro b (exists.intro G (exists.intro ùïê (and.intro ha (and.intro (mem_of_eq_of_mem ab_eq_w hw) (and.intro (mem_of_eq_of_mem heq hx) ab_eq_w )))))))),
      -- Aleshores ja tenim que es compleix:
      exact (exists.intro ùïê (exists.intro ùíµ (exists.intro G (exists.intro ùí¢ (and.intro Y_ss_Z (and.intro G_ss_Z (and.intro heq.symm rfl))))))), 
    --aleshores ja podem aplicar el lema e Zorn
    split, exact ZGsup,
    
  end
      --Aleshores podem aplicar el lema de Zorn a P

  lemma WDGA (fFunc:f‚àà Y.funs Y.sUnion)(hx:x‚ààX)(X_notin_Y:X‚àâY): f‚à™{X.pair x}‚àà (Y‚à™{X}).funs (Y‚à™{X}).sUnion:=
  begin
    apply mem_funs.mpr,
    --primer vegem que f‚äÜ(Y‚à™{X}).prod (Y‚à™{X}).sUnion
    have fss:f‚äÜ(Y‚à™{X}).prod (Y‚à™{X}).sUnion,intros w hw2,
      have w_in_YUY: w‚àà Y.prod Y.sUnion, from (mem_funs.mp fFunc).left hw2,
      have Y_ss:Y‚äÜ Y‚à™{X}, from subset_union_left,
      have YU_ss:Y.sUnion‚äÜ (Y‚à™{X}).sUnion, from subset_sUnion (Y_ss),
      exact (subset_trans (subset_prod_right YU_ss) (subset_prod_left Y_ss )) w_in_YUY,
    --ara vegem que {X.pair x}‚äÜ (Y‚à™{X}).prod (Y‚à™{X}).sUnion
    have Xxss:{X.pair x}‚äÜ(Y‚à™{X}).prod (Y‚à™{X}).sUnion, intros w hw2,
        have Xx_in_YUY:X.pair x ‚àà (Y‚à™{X}).prod (Y‚à™{X}).sUnion,apply pair_mem_prod.mpr,
        have X_in_YX:X‚àà (Y‚à™{X}), from mem_union.mpr (or.inr (mem_singleton.mpr rfl)),split,
        exact X_in_YX, exact mem_sUnion.mpr (exists.intro X (exists.intro X_in_YX hx)),
      --aleshores w‚àà {X.pair x} ‚äÜ (Y‚à™{X}).prod (Y‚à™{X}).sUnion
      exact (subset_of_singleton_of_mem Xx_in_YUY) hw2,
    --aleshores tenim que f‚à™{X.pair x}‚äÜ(Y‚à™{X}).prod (Y‚à™{X}).sUnion
    split, intros w hw,have hw2, from mem_union.mp hw, cases hw2,
    ----volem demostrar que w‚àà (Y‚à™{X}).prod (Y‚à™{X}).sUnion
    --w‚ààf--
      -- com w‚àà f‚äÜ (Y‚à™{X}).prod (Y‚à™{X}).sUnion
      exact fss hw2,
    --w‚àà{X.pair x}--
      exact Xxss hw2,
    --(‚àÉ! (w : Set), z.pair w ‚àà f ‚à™ {X.pair x})
    intros z hz, have hz2, from mem_union.mp hz, cases hz2,
    --z‚àà Y--
      --aleshores com z‚àà Y,‚àÉ!w, z.pair w‚àà f
      rcases (mem_funs.mp fFunc).right z hz2 with ‚ü®w, hw, wuniq‚ü©,
      --i com w‚àà f‚äÜf‚à™ {X.pair x}
      have w_in_f2:z.pair w‚àà f‚à™{X.pair x}, from subset_union_left hw,
      split,split, exact w_in_f2,
      --‚ä¢‚àÄ (y : Set), (Œª (w : Set), z.pair w ‚àà f ‚à™ {X.pair x}) y ‚Üí y = w
      intros y hy, have hy2, from mem_union.mp hy, cases hy2,
      --z.pair y‚àà f--
        exact wuniq y hy2,
      --z.pair y‚àà {X.pair x}
        --ara, com z.pair w‚àà f‚äÜ Y.pair Y.sUnion, tenim que z‚àà Y
        have z_in_Y:z‚àà Y, from pair_mem_prod_left ((mem_funs.mp fFunc).left hw),
        have X_in_Y:X‚àà Y, from mem_of_eq_of_mem (pair_inj_left (mem_singleton.mp hy2)) z_in_Y,
        exact false.elim (X_notin_Y X_in_Y),
    --z=X--
      --aleshores la imatge ser√† x
      split,split, exact mem_of_eq_of_mem_left (mem_singleton.mp hz2).symm (mem_union.mpr (or.inr (mem_singleton.mpr rfl))),
      --‚ä¢ ‚àÄ (y : Set), (Œª (w : Set), z.pair w ‚àà f ‚à™ {X.pair x}) y ‚Üí y = x
      intros y hy,have hy2, from mem_union.mp hy, cases hy2,
      --z.pair y‚àà f-- aleshores X=z‚àà f‚äÜ Y.pair Y.Union
        have X_in_Y:X‚àà Y, from pair_mem_prod_left ((mem_funs.mp fFunc).left (mem_of_eq_of_mem_left (mem_singleton.mp hz2) hy2)),
        exact false.elim (X_notin_Y X_in_Y),
      --z.pair y ‚àà {X.pair x}
        exact pair_inj_right (mem_singleton.mp hy2), 
  end


  lemma zorn_to_AC (hzorn:Zorn.{u})(ùïè_props: ‚àÖ ‚àâ ùïè):‚àÉ(f:Set.{u})(h:f‚àà ùïè.funs (ùïè.sUnion)), ChoiceFunction f:=
  begin
  --suposem que ùïè √©s el buit
    by_cases hùïèE:ùïè=(‚àÖ:Set.{u}),
      --definim f com l'aplicaci√≥ buida
      set f:={x‚àà (‚àÖ:Set.{u}).prod (‚àÖ:Set.{u}).sUnion| false},
      --demostrem que l'aplicaci√≥ buida est√† ben definida
      have h1:f ‚àà ùïè.funs ùïè.sUnion, apply mem_sep.mpr,
        --vegem que f‚äÜ ùïè.prod ùïè.sUnion i  que est√† ben definida
        have fss:f‚äÜ ùïè.prod ùïè.sUnion, intros w hw,exact false.elim (mem_sep.mp hw).right,
        split, exact mem_powerset.mpr fss,split, exact fss, intros z hz, exact false.elim (not_mem_empty z (mem_of_eq_of_set hùïèE hz)),
      --nom√©s queda demostrar que √©s funci√≥ d'elecci√≥
      have h2:ChoiceFunction f, intros z w hzw,
        exact false.elim (mem_sep.mp hzw).right,
      exact exists.intro f (exists.intro h1 h2),
    
  --suposem que ùïè no √©s buit  hùïèE:¬¨ ùïè = ‚àÖ
    specialize hzorn (P_ ùïè) (hpo ùïè) (and.intro (Pne hùïèE ùïè_props) PWO),
    cases hzorn with M M_max, cases M with M M_in_P,
    --com que M‚àà P, aleshores podem desglosar M en N‚äÜùïè i G:N‚Üí UN
    rcases (mem_sep.mp M_in_P) with ‚ü®hMX,N,G,Gfunc,CFG,Meq ‚ü©,
    --aleshores en primer lloc tenim que M‚äÜ ùïè
    have N_ss_X: N‚äÜùïè, from mem_powerset.mp (pair_mem_prod_left (mem_of_eq_of_mem Meq hMX)),
    --demostrem que N=X i aleshores obtenim que G √©s funci√≥ d'elecci√≥ ben definida
    have N_eq_X:N=ùïè, --si ho tenim, arribem a que G = f
    --aleshores nom√©s queda demostrar que N = ùïè
      by_contra N_neq_X, 
      have XlNne: Set_nonempty (ùïè\N), from diff_nonempty_of_subsetneq N_ss_X N_neq_X,
      --aleshores tenim que existeix un X‚àà (ùïè\N)
      cases XlNne with X hX, have hX, from mem_diff.mp hX, cases hX with hX X_notin_N,
      --Ara, com  ‚àÖ ‚àâ ùïè, tenim que X.nonempty ‚Üí ‚àÉ x‚àà X
      have Xne:Set_nonempty X, from xne_of_XhasNoE_of_xinX ùïè_props hX, cases Xne with x hx,
      --volem demostrar que G‚à™{X.pair x}‚àà P
        --primer provem que G‚à™{X.pair x}‚àà (Y‚à™{X}).funs (Y‚à™{X}).sUnion 
        have WDGUX:G‚à™{X.pair x}‚àà (N‚à™{X}).funs (N‚à™{X}).sUnion, from WDGA Gfunc hx X_notin_N,
        --ara provem que √©s funci√≥ d'elecci√≥:
        have CFGUX: ‚àÄ(a b:Set.{u}), a.pair b ‚àà G‚à™{X.pair x} ‚Üí b‚àà a, intros a b hab, have hab2, from (mem_union.mp hab),cases hab2,
          --si ab‚àà G
            exact CFG hab2,
          --si ab‚àà{X.pair x}
            have h1:a=X ‚àß  b=x ,from pair_inj.mp (mem_singleton.mp hab2),
            --b=x ‚àà X = a 
            exact mem_of_eq_of_mem h1.right.symm (mem_of_eq_of_set h1.left.symm hx),
        --nom√©s queda demostrar que estan dins de N‚à™{X}.pair G‚à™{X.pair x}‚àà(ùïè).powerset.prod (ùïè.prod ùïè.sUnion).powerset
        have hfinale:(N‚à™{X}).pair (G‚à™{X.pair x})‚ààùïè.powerset.prod (ùïè.prod ùïè.sUnion).powerset,
          --primer vegem que N‚à™{X}‚äÜ ùïè
          have NuX_ss:N‚à™{X}‚äÜ ùïè, from subset_of_union_of_subsets N_ss_X (subset_of_singleton_of_mem hX),
          have GuXx_ss_XUX:G‚à™{X.pair x} ‚äÜ ùïè.prod ùïè.sUnion, from previs.subset_trans (mem_funs.mp WDGUX).left (subset_prod_inj_mpr NuX_ss (subset_sUnion NuX_ss)),
          exact pair_mem_prod.mpr (and.intro (mem_powerset.mpr NuX_ss) (mem_powerset.mpr GuXx_ss_XUX)),
        --Aleshores ja tenim que G‚à™{X.pair x}‚àà P
      have GuXx_in_P:(N‚à™{X}).pair (G‚à™{X.pair x})‚àà P_ ùïè, from mem_sep.mpr (and.intro hfinale (exists.intro (N‚à™{X}) (exists.intro (G‚à™{X.pair x}) (and.intro WDGUX (and.intro CFGUX rfl))))),
      --tenim que N.pair G‚àà P
      have NG_in_P:N.pair G‚àà P_ ùïè, from mem_of_eq_of_mem Meq M_in_P, 
      --nom√©s queda demostrar que N.pair G ‚â§ (N‚à™{X}).pair (G‚à™{X.pair x})
      have leDEF: (hle_ (P_ ùïè)) ‚ü®M,M_in_P‚ü© ‚ü®(N‚à™{X}).pair (G‚à™{X.pair x}), GuXx_in_P ‚ü©,
        --(X ‚äÜ Y) ‚àß (G ‚äÜ H)
        have N_ss:N‚äÜ (N‚à™{X}), from subset_union_left,
        have G_ss:G‚äÜ (G‚à™{X.pair x}),from subset_union_left,
        split,split,split,split,split, exact N_ss, split, exact G_ss,exact and.intro Meq.symm rfl,
      --Aleshores, com M era maximal i M ‚â§ (N‚à™{X}).pair (G‚à™{X.pair x}) tenim que M=(N‚à™{X}).pair (G‚à™{X.pair x})
      specialize M_max ‚ü®(N‚à™{X}).pair (G‚à™{X.pair x}), GuXx_in_P ‚ü© leDEF,
      --aleshores N.pair G=M=N‚à™{X}.pair G‚à™{X.pair x}
      have M_eq_NGuXx: M = ((N‚à™{X}).pair (G‚à™{X.pair x})), from congr_arg subtype.val M_max,
      --aleshores tenim que N=N‚à™{X}
      have N_eq_NuX:N=N‚à™{X}, from pair_inj_left (eq.trans Meq.symm M_eq_NGuXx),
      --aleshores tenim que N‚à™{X}‚äÜ N ‚Üí {X}‚äÜ N
      have X_ss_N:{X}‚äÜ N, from subset_of_subset_of_union_left (previs.subset_of_eq N_eq_NuX.symm),
      --aleshores tenim que X ‚àà N
      have X_in_N:X‚ààN, from mem_of_subsingleton_subset.mp X_ss_N,
      exact X_notin_N X_in_N,
    --aleshores ja tenim que √©s funci√≥ d'elecci√≥ G perque N=ùïè
    have h1:G ‚àà ùïè.funs (‚ãÉ‚ÇÄ ùïè), from N_eq_X ‚ñ∏ Gfunc,
    have h2:ChoiceFunction G, intros a b hab, exact CFG hab,
    exact exists.intro G (exists.intro h1 h2),
  end
end preAC

------------------------------------------------------------------------------------------------------
-------------------------------------------AC ‚Üí Zorn--------------------------------------------------
------------------------------------------------------------------------------------------------------
namespace preZorn
variables [partial_order P.to_set][partial_order Q.to_set]
-------------------------------------------
--                 LEMA A                --
-------------------------------------------
lemma LA (Pne:Set_nonempty P) (PWO:‚àÄ (C : (Œ¶ P)), C.val ‚àà chains P ‚Üí Set_nonempty C.val ‚Üí (‚àÉ (s : (P.to_set)), s suprem_de C))
(hnon_max:¬¨‚àÉ (M : P.to_set), element_maximal M):
‚àÄ(C:Œ¶ P)(Cchain:is_chain C), (Set_nonempty (Upp C)):=  
begin
  intros C Cchain, by_cases hCne:C.1=(‚àÖ:Set.{u}),
  --si C.1=‚àÖ 
    --aleshores existeix un x‚àà P, demostrem que x‚àà Upp ‚àÖ
    cases Pne with x hx,
    have x_in_UppC:x‚àà Upp(C),apply mem_sep.mpr,split, exact hx,split, intros y hy, exact false.elim (not_mem_empty y (mem_of_eq_of_set hCne hy)), exact hx,
    split, exact x_in_UppC,
  --si C.1‚â† ‚àÖ
    have Cne:Set_nonempty C.1, from nonempty_iff_notEmpty.mpr hCne,
    --aleshores, com no √©s buit, per la condici√≥ del lema de Zorn obtenim que C t√© suprem
    have C1chain:C.1‚àà chains P, apply mem_sep.mpr,split, exact mem_powerset.mpr C.2, split, exact Cchain, exact C.2,
    --nomenem s al suprem de C
    have supC, from PWO C C1chain Cne, cases  supC with s sSupC,
    --sabem que s no pot ser maximal
    by_cases hmax:element_maximal s, exact false.elim (hnon_max (exists.intro s hmax)),
    --si s no √©s element maximal, aleshores existeix un element x superior a s
    have xmax:‚àÉx:P.to_set, s < x, from not_maximal_to_lt hmax, cases xmax with x xmax,
    have x_eq_x:x=‚ü®x.1,x.2‚ü©, from subtype.eq rfl,
    have s_lt_x:s<‚ü®x.1,x.2‚ü©, exact eq.trans_gt x_eq_x xmax,
    --vegem que x est√† en Upp C
    have x_in_UppC:x.1‚àà Upp(C),apply mem_sep.mpr,split, exact x.2, split, intros y hy, exact lt_of_le_of_lt (sSupC y hy) (s_lt_x),
    exact exists.intro x.1 x_in_UppC,
end

def ‚ÑÇ :Set.{u}:={Z‚àà powerset Q| ‚àÉC:(Œ¶ Q), is_chain C ‚àß Z=Upp C}

lemma C_hasnt_E (Pne:Set_nonempty P) (PWO:‚àÄ (C : (Œ¶ P)), C.val ‚àà chains P ‚Üí Set_nonempty C.val ‚Üí (‚àÉ (s : (P.to_set)), s suprem_de C))
(hnon_max:¬¨‚àÉ (M : P.to_set),element_maximal M) : (‚àÖ:Set.{u}) ‚àâ (‚ÑÇ P) :=
begin
  intro E_in_C,
  --aleshores ‚àÉC, cadena , ‚àÖ = Upp C
  rcases (mem_sep.mp E_in_C).right with ‚ü®C,Cchain,Ceq‚ü©, 
  --aleshores tenim que (Upp C) no √©s buit
  have UppCne:Set_nonempty (Upp C), from (LA Pne PWO hnon_max) C Cchain, cases UppCne with x hx,
  exact not_mem_empty x (mem_of_eq_of_set Ceq.symm hx),
end

--Definim la funci√≥ d'elecci√≥ F tal que x.pair y ‚àà F ‚Üí y ‚àà x

class conforme (f:Set.{u}) (A:Œ¶ P):Prop:=
(C0:Set_nonempty A.1)
(C1:‚àÄ(X:Set.{u})(hss:X‚äÜA.1), Set_nonempty X ‚Üí (‚àÉ(x:P.to_set)(hx:x.1‚ààX),minim_of_set (phi X (previs.subset_trans hss A.2)) x hx))
(C2:‚àÄ(x:Set.{u})(hx: x‚àà A.1), (Upp (phi (A‚Üìhx) (Cv_ss_P))).pair x ‚àà f)

lemma CC1 {A:Œ¶ P} (hconf:conforme f A): ‚àÄ{X:Set.{u}}(hss:X‚äÜA.1), Set_nonempty X ‚Üí (‚àÉ(x:P.to_set)(hx:x.1‚ààX),minim_of_set (phi X (previs.subset_trans hss A.2)) x hx):= hconf.C1
lemma CC2 {A:Œ¶ P} (hconf:conforme f A): ‚àÄ{x:Set.{u}}{hx: x‚àà A.1}, (Upp (phi (A‚Üìhx) (Cv_ss_P))).pair x ‚àà f:=hconf.C2


lemma confCadC1 (f:Set.{u}) (A:Œ¶ P) (hCC1:‚àÄ(X:Set.{u})(hss:X‚äÜA.1), Set_nonempty X ‚Üí (‚àÉ(x:P.to_set)(hx:x.1‚ààX),minim_of_set (phi X (previs.subset_trans hss A.2)) x hx)):is_chain A:=
begin
  intros a b ha hb,
  have ab_ss_A:{a,b}‚äÜ A.1, intros w hw, have hw2, from mem_pair.mp hw, cases hw2,
    exact mem_of_eq_of_mem hw2.symm ha,--si w=a
    exact mem_of_eq_of_mem hw2.symm hb,--si w=b
  have abne: Set_nonempty {a,b}, from exists.intro a (mem_pair.mpr (or.inl rfl)),
  --aleshores existeix un m√≠nim de {a,b}
  have hmin,from hCC1 {a,b} ab_ss_A abne,rcases hmin with ‚ü®x,hx,xmin‚ü©, have hx2,from mem_pair.mp hx, cases hx2,
  --si x.val=a
    have x_le_b:x ‚â§ ‚ü®b, A.2 hb‚ü© , from xmin b (mem_pair.mpr (or.inr rfl)), 
    have x_eq_a:‚ü®x.1, x.2‚ü© = ‚ü®a,A.2 ha‚ü©, from subtype.eq hx2,
    have x_eq_x:‚ü®x.1,x.2‚ü© = x, from subtype.eq rfl,
    exact or.inl ((eq.trans x_eq_a.symm x_eq_x).trans_le x_le_b),
  --si x.val = b
    have x_le_a:x ‚â§ ‚ü®a, A.2 ha‚ü© , from xmin a (mem_pair.mpr (or.inl rfl)),
    have x_eq_a:‚ü®x.1, x.2‚ü© = ‚ü®b,A.2 hb‚ü©, from subtype.eq hx2,
    have x_eq_x:‚ü®x.1,x.2‚ü© = x, from subtype.eq rfl,
    exact or.inr ((eq.trans x_eq_a.symm x_eq_x).trans_le x_le_a),
end
lemma confCad {f:Set.{u}} {A:Œ¶ P}:conforme f A ‚Üí is_chain A:=Œª h, confCadC1 f A h.C1


-------------------------------------------
--                 LEMA B                --
-------------------------------------------
open previs.PO_lemmas


lemma LB {f:Set.{u}} {A B:Œ¶ P} (fFunc:f‚àà (‚ÑÇ P).funs (‚ãÉ‚ÇÄ ‚ÑÇ P) ) (hA:conforme f A)(hB:conforme f B):Set_nonempty (A.1\B.1)‚Üí (‚àÉ(x:Set.{u})(h1:x‚àà (A.1\B.1)), B.1 = (A‚Üì(mem_diff.mp h1).left) ‚àß minim_of_set (phi (A.1\B.1) (diffsubtype A B)) ‚ü®x,A.2 (mem_diff.mp h1).left ‚ü© h1 ):=
begin
  intros AlBne,
  --com que A\B‚äÜ A
  have AlB_ss_A: A.1\B.1‚äÜ A.1, exact dif_subset,
  --Aleshores tenim que t√© m√≠nim
  have AlBmin,from CC1 hA AlB_ss_A AlBne, 
  rcases AlBmin with ‚ü® x, hx,xmin‚ü©, 
  have hprob:(phi (A.val \ B.val) (previs.subset_trans dif_subset A.2 )).val = (A.val \ B.val), from phieq_val (previs.subset_trans dif_subset A.2), 
  have hx2:x.val‚àà (phi (A.val \ B.val) (previs.subset_trans dif_subset A.2 )).val,from mem_of_eq_of_set hprob.symm hx ,
  --nom√©s tenim que demostrar que 
  have LemaB: B.val = (A‚Üì(mem_diff.mp hx).left),swap, split,split,split,exact LemaB, 
    --demostrem que si es dona el lema B aleshores ja estaria:
    intros y hy, have hy2, from mem_of_eq_of_set hprob hy,
    have x_le_y:x ‚â§ ‚ü®y, A.2 (mem_diff.mp hy2).left‚ü©, from xmin y hy2,
    exact le_trans (le_of_eq pieq) x_le_y,
--LEMA B--
  set Ax:Set.{u} := (A‚Üì(mem_diff.mp hx).left),
  ext w,split,swap,
--A‚Üìx ‚äÜ B
  intro w_in_Ax, by_contra w_notin_B,
  --aleshores w‚àà (A.val\B.val)
  have w_in_Alb:w‚àà (A.val\B.val), from mem_diff.mpr (and.intro (Cv_ss_C w_in_Ax) (w_notin_B)),
  --per tant x ‚â§ w
  have x_le_w:x ‚â§ ‚ü®w , Cv_ss_P w_in_Ax‚ü© , from xmin w w_in_Alb,
  --i per hip√≤tesi, w< x
  have w_lt_x:‚ü®w , Cv_ss_P w_in_Ax‚ü© < x, cases (mem_cv.mp w_in_Ax) with h1 h2, exact vals_of_pieq_of_lt h2,
  --aleshores x‚â§ w < x
  have x_irrefl:x<x, from lt_of_le_of_lt x_le_w w_lt_x, exact lt_irrefl x x_irrefl,
--B ‚äÜ A‚Üìx
  intros hw, by_contra w_notin_Ax,
  --aleshores B\w_notin_Ax no √©s buit, i √©s subconjunt de B 
  have BlAxne:Set_nonempty (B.val\(A‚Üì(mem_diff.mp hx).left)),split, exact mem_diff.mpr (and.intro hw w_notin_Ax),
  have BlAxss:(B.val\(A‚Üì(mem_diff.mp hx).left))‚äÜ B.1, from dif_subset,
  --per tant t√© m√≠nim y
  have BlAx_min, from CC1 hB BlAxss BlAxne, rcases BlAx_min with ‚ü®y,hy,ymin‚ü©,
  set By:Set.{u}:=(B‚Üì(mem_diff.mp hy).left),
  --LEMA B1--
  have LB1: ‚àÄ{v u:P.to_set}(h1 :v.1 ‚àà A.val)(h2:u.1‚àà By), v < u ‚Üí v.1‚àà By,
    intros v u hv hu v_lt_u,
    --en primer lloc tenim que v < y 
    have v_lt_y:v < y, cases (mem_cv.mp hu) with hu u_lt_y, exact lt_trans v_lt_u ( lt_vals.mp u_lt_y),
    --nom√©s cal demostrat que v‚àà B
    have v_in_B:v.1 ‚àà B.1, by_contra v_notin_B,
      --aleshores v‚àà A\B
      have v_in_AlB:v.1‚ààA.val\B.val, from mem_diff.mpr (and.intro hv v_notin_B), 
      -- Ara, com x ‚â§ v i v < u ‚Üí u ‚àâ A‚Üìx
      have x_le_v:x‚â§ v, from vals_of_pieq_of_le (xmin v.1 v_in_AlB),
      have x_lt_u:x < u, from lt_of_le_of_lt x_le_v v_lt_u,
      have u_notin_Ax:u.1‚àâAx, intro u_in_Ax, cases (mem_cv.mp u_in_Ax) with u_in_A u_lt_x,
        --ja que si u‚ààA‚Üìx ‚Üí x < u < x
        have x_irrefl:x<x, from lt_trans x_lt_u (lt_vals.mp u_lt_x),exact lt_irrefl x x_irrefl,
      --Aleshores, tenim que u‚àà B\A‚Üìx,
      have u_in_BlAx:u.1‚àà B.1\Ax, from mem_diff.mpr (and.intro (mem_sep.mp hu).left u_notin_Ax),
      --per tant, per definici√≥ de y‚â§u i per def de u < y
      have y_le_u:y ‚â§ u, from vals_of_pieq_of_le (ymin u.1 u_in_BlAx), 
      have u_lt_y:u<y, cases (mem_cv.mp hu) with u_in_B u_lt_y, exact lt_vals.mp u_lt_y,
      --aleshores tenim que y < y
      have y_irrefl:y<y, from lt_of_le_of_lt y_le_u u_lt_y, 
      exact lt_irrefl y y_irrefl,
    exact mem_cv.mpr (exists.intro v_in_B (lt_vals.mpr v_lt_y)),
  --Aix√≠ queda demostrat el lema B1

  --Ara, com A\B no √©s buit, aleshores A\B‚Üìy tampoc
  have x_notin_By:x.val‚àâBy,intro x_in_By, have x_in_B:By ‚äÜ B, from Cv_ss_C, exact (mem_diff.mp hx).right (x_in_B x_in_By), 

  have AlBy_ne:Set_nonempty (A.val\By), 
    split, exact mem_diff.mpr (and.intro (mem_diff.mp hx).left x_notin_By),
  have AlBy_ss_A:(A.val\By)‚äÜ A, from dif_subset,
  --Aleshores podem aplicar la 1a propietat de conforme 
  have hzmin, from CC1 hA AlBy_ss_A AlBy_ne, rcases hzmin with ‚ü®z,hz,zmin‚ü©, 
  set Az:Set.{u}:=(A‚Üì(mem_diff.mp hz).left),
  --aleshores demostrem que Az=By
  have LB2:Az=By,ext w,split,
  --w‚àà Az‚Üí w‚àà By
    intro hw,by_contra w_notin_By,
    --aleshores w‚àà A\By
    have w_in_AlBy: w‚àà (A.val\By),from mem_diff.mpr (and.intro (mem_sep.mp hw).left w_notin_By),
    --per tant, com z √©s m√≠nim de  A\By, tenim que  z‚â§ w
    have z_le_w: z ‚â§ ‚ü®w,A.2 (mem_diff.mp w_in_AlBy).left‚ü©, from (zmin w w_in_AlBy),
    --per√≤, com w‚àà Az, w< z
    cases (mem_cv.mp hw) with hw w_lt_z,
    --aleshores z < w < z
    have z_irrefl:z<z, from vals_of_pieq_of_lt (lt_of_le_of_lt z_le_w w_lt_z),
    exact lt_irrefl z z_irrefl,
  --w‚àà By ‚Üí w‚àà Az
    intro hw,--suposem que w‚àâA
    have w_in_A:w‚àà A.val,by_contra w_notin_A,
      --aleshores w‚àâA‚Üìx
      have w_notin_Ax:w‚àâAx, exact Œª w_in_Ax, w_notin_A (mem_sep.mp w_in_Ax).left,
      --per tant w‚àà B\A‚Üìx
      have w_in_BlAx: w‚àà (B.val\Ax), from mem_diff.mpr (and.intro (mem_sep.mp hw).left w_notin_Ax),
      --aleshores, per definici√≥ de y ‚â§ w
      have y_le_w:y‚â§‚ü®w, (B.2 (mem_sep.mp hw).left)‚ü©, from (ymin w w_in_BlAx),
      --per√≤ per hip√≤tesi w < y
      have w_lt_y:‚ü®w, (B.2 (mem_sep.mp hw).left)‚ü© < y, cases (mem_cv.mp hw) with hw2 w_lt_y, exact vals_of_pieq_of_lt w_lt_y,
      --aleshores tenim que y < y
      have y_irrefl:y<y, from lt_of_le_of_lt y_le_w w_lt_y,
      exact lt_irrefl y y_irrefl,
    --Aleshores, si w‚àà A nom√©s queda provar que w < z
    have w_lt_z:‚ü®w, (B.2 (mem_sep.mp hw).left)‚ü©<z, by_contra w_nlt_z,
      --Tenim que A √©s cadena, per ser conforme
      have hw_le, from confCad hA w z.1 w_in_A (mem_diff.mp hz).left,
      --primer vegem que w‚â†z
      have w_neq_z:w‚â†z.1, intro w_eq_z, 
        --aleshores z‚àà By, 
        have z_in_By:z.1‚ààBy, from mem_of_eq_of_mem w_eq_z hw,
        --per√≤ per hip√≤tesi z‚àâBy
        exact (mem_diff.mp hz).right z_in_By,
      --ara suposem dos casos per ser A cadena : w ‚â§ z ‚à® z ‚â§ w
      cases hw_le,
      -- w ‚â§ z --
        --aleshores w < z ‚à® w=z per√≤ aix√≤ no es pot donar
        have w_lt_z,from lt_or_eq_of_le hw_le, cases w_lt_z,
          exact w_nlt_z (vals_of_pieq_of_lt w_lt_z), exact w_neq_z (congr_arg subtype.val w_lt_z),
      -- z ‚â§ w
        --aleshores z < w ‚à® z=w
        have z_lt_w,from lt_or_eq_of_le hw_le, cases z_lt_w,
        --si z < w, pel lema B1, obtenim que z‚àà By
        have w_in_By:‚ü®w, (B.2 (mem_sep.mp hw).left)‚ü©.val ‚àà By, from hw,
        have z_in_By:z.1‚àà By, from LB1 (mem_diff.mp hz).left w_in_By (vals_of_lt_of_pieq z_lt_w),
        --per√≤ per definici√≥ z‚àâ By
        exact (mem_diff.mp hz).right z_in_By,
        --si z = w ‚Üí w = z
        exact w_neq_z (congr_arg subtype.val z_lt_w.symm),
    --Aleshores ja tenim tot el que necessit√†vem
    exact mem_cv.mpr (exists.intro w_in_A (vals_of_pieq_of_lt_iff.mpr w_lt_z)),
  --Nom√©s queda demostrar que z=y
  have z_eq_y1:z=y,
    --com Az=By tenim que (phi (Az) (Cv_ss_P)) = (phi (Az) (Cv_ss_P))
    have Az_eq_By1:(phi (Az) (Cv_ss_P)) = (phi (By) (Cv_ss_P)), 
      have Az2:(phi (Az) (Cv_ss_P)).val = Az , from phieq_val Cv_ss_P,
      have By2:(phi (By) (Cv_ss_P)).val = By , from phieq_val Cv_ss_P,
      have Az_eq_By1_val:(phi (Az) (Cv_ss_P)).val=(phi (By) (Cv_ss_P)).val, from ( calc
      (phi (Az) (Cv_ss_P)).val  = Az :Az2
      ...                       = By :LB2
      ...                       = (phi (By) (Cv_ss_P)).val : By2.symm
      ),
      exact subtype.eq Az_eq_By1_val,
    have UppAz_eq_UppBy:Upp (phi (Az) (Cv_ss_P)) = Upp (phi (By) (Cv_ss_P)), exact congr_arg Upp Az_eq_By1,
    --Ara, demostrem que Upp (phi (Az) (Cv_ss_P))‚àà ‚ÑÇ P
    have Az_chain: is_chain (phi (Az) (Cv_ss_P)), 
      --com que A √©s conforme, aleshores √©s cadena 
      have hCadA:is_chain A, from confCad hA,
      --per tant, A‚Üìx √©s cadena
      exact cv_is_cad_of_cad hCadA,
    --Aleshores, com Az √©s cadena, Upp (Az)‚àà ‚ÑÇ P,
    have UppAz_in_C:Upp (phi (Az) (Cv_ss_P)) ‚àà ‚ÑÇ P, apply mem_sep.mpr,
      --Upp (phi (Az) (Cv_ss_P)) ‚äÜ P
      have hUpp_ss: Upp (phi (Az) (Cv_ss_P))‚äÜ P, from Œª w hw, (mem_sep.mp hw).left,
      split, exact mem_powerset.mpr hUpp_ss,
      --‚àÉ (C : ‚Ü•(Œ¶ P)), is_chain C ‚àß Upp (phi Az Cv_ss_P) = Upp C
      split, exact and.intro Az_chain rfl,
    --aleshores, com Az=By, tenim que Upp(By)‚àà ‚ÑÇ P
    have UppBy_in_C:Upp (phi (By) (Cv_ss_P))‚àà ‚ÑÇ P, from mem_of_eq_of_mem UppAz_eq_UppBy UppAz_in_C,
    --Com f est√† ben definida tenim que la imatge de Upp (Az) √©s √∫nica
    have funiq, from (mem_funs.mp fFunc).right (Upp (phi (Az) (Cv_ss_P))) UppAz_in_C, rcases funiq with ‚ü®w,hw, wuniq‚ü©,
    --Ara com, A √©s Conforme,  Upp (Az).pair z ‚àà f
    have hz_in_f: (Upp (phi (Az) (Cv_ss_P))).pair z.1 ‚àà f, from CC2 hA,
    --De manera an√†lega tenim que Upp (By).pair y ‚àà f
    have hBy_in_f: (Upp (phi (By) (Cv_ss_P))).pair y.1 ‚àà f, from CC2 hB,
    --aleshores, com (Upp (phi (By) (Cv_ss_P))) = (Upp (phi (Az) (Cv_ss_P))) ‚Üí (Upp (phi (Az) (Cv_ss_P))).pair y.1‚àà f
    have hy_in_f: (Upp (phi (Az) (Cv_ss_P))).pair y.1 ‚àà f, from mem_of_eq_of_mem_left UppAz_eq_UppBy.symm hBy_in_f,
    --aleshores w=z ‚àß w=y
    have w_eq_z1: z.1 = w, from wuniq z.1 hz_in_f,
    have w_eq_y1:y.1 = w, from wuniq y.1 hy_in_f,
    have z_eq_w:z.1=y.1, from eq.trans w_eq_z1 w_eq_y1.symm,
    exact subtype.eq z_eq_w,
  --com x‚àà A\B‚Üí x‚àà A\By
  have x_in_AlBy:x.1‚àà(A.1\By), from mem_diff.mpr (and.intro (mem_diff.mp hx).left x_notin_By),
  --aleshores, z ‚â§ x
  have z_le_x: z ‚â§ x, from vals_of_pieq_of_le (zmin x.1 x_in_AlBy),
  --aleshores y ‚â§ x, 
  have y_le_x: y ‚â§ x, exact (eq.symm z_eq_y1).trans_le z_le_x, 
  --per tant: y < x ‚à® y = x 
  have y_lt_x, from lt_or_eq_of_le y_le_x, cases y_lt_x,
  --y < x--
    --tenim que y‚ààAx
    have y_in_Ax:y.1 ‚àà Ax, apply mem_cv.mpr,split,  exact lt_vals.mpr y_lt_x, exact mem_of_eq_of_mem (congr_arg subtype.val z_eq_y1) (mem_diff.mp hz).left,
    --el qual entra en contradicci√≥ per definici√≥ de y
    exact (mem_diff.mp hy).right y_in_Ax,
  --y = x--
    have x_in_B:x.1‚àà B.1, from mem_of_eq_of_mem (congr_arg subtype.val y_lt_x) (mem_diff.mp hy).left,
    have hx2:x.1‚àâB.1, from (mem_diff.mp hx).right,
    exact hx2 x_in_B,
end

-------------------------------------------
--                 LEMA C                --
-------------------------------------------
lemma sUnion_A_in_P {P ùî∏:Set.{u}} (A_ss_PP:ùî∏ ‚äÜ powerset P ):sUnion ùî∏ ‚äÜ P:=
begin
  intros y hy, rcases (mem_sUnion.mp hy) with ‚ü®z, hz, y_in_z‚ü©,
  have z_in_PP:z‚àà P.powerset, from A_ss_PP hz,
  exact (mem_powerset.mp z_in_PP) y_in_z,
end

lemma LC {ùî∏ f:Set.{u}}(fFunc:f‚àà (‚ÑÇ P).funs (‚ãÉ‚ÇÄ ‚ÑÇ P))(A_ss_PP:ùî∏ ‚äÜ powerset P )(hùî∏: ‚àÄ{A:Set.{u}}(hA:A‚ààùî∏), conforme f (phi A (mem_powerset.mp (A_ss_PP hA)))) (hne:Set_nonempty ùî∏ ):conforme f (phi (sUnion ùî∏) (sUnion_A_in_P A_ss_PP)):=
begin split,
--‚ä¢ ‚ãÉ‚ÇÄ ùî∏ nonempty
  --com ùî∏ no √©s buit, aleshores existeix un A‚àà ùî∏, i com que, A √©s conforme per ser element de ùî∏, aleshores ‚àÉa‚àà A
  cases hne with A hA, cases (hùî∏ hA).C0 with a ha,
  --aleshores a‚àà ‚ãÉ‚ÇÄùî∏ 
  split,exact mem_sUnion.mpr (exists.intro A (exists.intro hA ha)),
--‚ä¢ ‚àÄ (X : Set) (hss : X ‚äÜ (phi (‚ãÉ‚ÇÄ ùî∏) _).val), Set_nonempty X ‚Üí (‚àÉ (x : ‚Ü•(P.to_set)) (hx : x.val ‚àà X), minim_of_set (phi X _) x hx)
  intros X hss Xne, 
  --com X no √©s buit, ‚àÉa‚àà X
  cases Xne with a ha,
  --aleshores, com a‚àà sUnion ùî∏, existeix A‚àà ùî∏, a‚àà A i A √©s conforme
  rcases (mem_sUnion.mp (hss ha)) with ‚ü® A, hA, a_in_A‚ü©,
  have hAconf,from hùî∏ hA,
  --aleshores tenim que X‚à©A ‚äÜ A i no √©s buit
  have XcapA_ss_A: X‚à©A ‚äÜ A, from subset_of_inter_right,
  have XcapAne:Set_nonempty (X‚à©A),split, exact mem_inter.mpr (and.intro ha a_in_A),
  --aleshores per la propietat C1 de conforme i ser A conforme tenim que t√© buit
  rcases (CC1 hAconf XcapA_ss_A XcapAne) with ‚ü®z,hz,zmin ‚ü©, split,split,
  --demostrem que z √©s el m√≠nim de X
  intros b hb,
  --suposem que b‚àà A
  by_cases b_in_A:b‚àà A, exact zmin b (mem_inter.mpr (and.intro hb b_in_A)),
  --suposem ara que b‚àâA, aleshores, existeix un B‚ààùî∏ ,B conforme i B\A no √©s buit
  rcases (mem_sUnion.mp (hss hb)) with ‚ü®B,hB,b_in_B‚ü©,
  have hBconf, from hùî∏ hB,
  have b_in_BlA,from mem_diff.mpr (and.intro b_in_B b_in_A),
  have BlAne:Set_nonempty (B\A), split, exact b_in_BlA,
  --aleshores, pel lema B, obtenim que existeix un x minim de B\A
  rcases (LB fFunc hBconf hAconf BlAne) with ‚ü®x,hx,A_eq_Bx,xmin‚ü©,
  --aleshores, com z‚àà A=Bx ‚Üí z < x ‚â§ b
  have x_le_b, from xmin b b_in_BlA,
  have z_in_Bx, from mem_of_eq_of_set A_eq_Bx (mem_inter.mp hz).right,
  cases (mem_cv.mp z_in_Bx) with z_in_B z_lt_x,
  have z_le_x, from vals_of_le_of_pieq (le_of_lt z_lt_x),
  exact le_trans z_le_x x_le_b,
  exact (mem_inter.mp hz).left,
--‚ä¢ ‚àÄ (x : Set) (hx : x ‚àà (phi (‚ãÉ‚ÇÄ ùî∏) _).val), (Upp (phi (phi (‚ãÉ‚ÇÄ ùî∏) _‚Üìhx) Cv_ss_P)).pair x ‚àà f
  intros a ha, rcases (mem_sUnion.mp ha) with ‚ü®A,hA, a_in_A ‚ü©, 
  have A_ss_P:A‚äÜP, from mem_powerset.mp (A_ss_PP hA),
  have hAconf, from hùî∏ hA,
  have UA_ss_P:‚ãÉ‚ÇÄùî∏‚äÜP, intros x hx,rcases (mem_sUnion.mp hx) with ‚ü® Y,hY,x_in_Y ‚ü©, exact mem_powerset.mp (A_ss_PP hY) x_in_Y,
  --aleshores demostrem que A‚Üìa = ‚ãÉ‚ÇÄùî∏‚Üìa
  have Aa_eq_Uùî∏a:((phi A A_ss_P)‚Üìa_in_A)=((phi (‚ãÉ‚ÇÄùî∏) UA_ss_P)‚Üìha), ext x,split,
  --‚ä¢ x ‚àà (A‚Üìa) ‚Üí x ‚àà ((‚ãÉ‚ÇÄ ùî∏)‚Üìa)
    intro hx, cases (mem_cv.mp hx) with x_in_A x_lt_a,
    --aleshores x_in_U‚ÇÄùî∏ 
    have x_in_UA:x‚àà (‚ãÉ‚ÇÄùî∏), from mem_sUnion.mpr (exists.intro A (exists.intro hA x_in_A)),  
    --per tant x_in_UA‚Üìa
    exact mem_cv.mpr (exists.intro x_in_UA x_lt_a),
  --‚ä¢ x ‚àà ((‚ãÉ‚ÇÄ ùî∏)‚Üìa) ‚Üí x ‚àà (A‚Üìa)
    intro hx, apply mem_cv.mpr,
    --com x ‚àà ((‚ãÉ‚ÇÄ ùî∏)‚Üìa) ‚Üí x‚àà (‚ãÉ‚ÇÄ ùî∏) ‚àß x < a
    cases (mem_cv.mp hx) with x_in_UA x_lt_a, split, exact x_lt_a,
    --suposem que x‚àâA
    by_contra x_notin_A,
    --aleshores existeix un x‚àà B‚ààùî∏, B conforme i B\A.nonempty
    rcases (mem_sUnion.mp x_in_UA) with ‚ü® B, hB, x_in_B ‚ü©,
    have hBconf,from hùî∏ hB, 
    have x_in_BlA:x‚ààB\A, from mem_diff.mpr (and.intro x_in_B x_notin_A),
    have BlAne:Set_nonempty (B\A), split, exact x_in_BlA,
    --aleshores, pel lema B obtenim que existeix un z minim de B\A, tal que A=B‚Üìz
    rcases (LB fFunc hBconf hAconf BlAne) with ‚ü®z, hz,A_eq_Bz ,zmin‚ü©,
    --aleshores com a‚àà A, a < z
    have a_in_Bz, from mem_of_eq_of_set A_eq_Bz a_in_A,
    cases (mem_cv.mp a_in_Bz) with a_in_B a_lt_z,
    --tamb√© tenim que z ‚â§ x, per ser m√≠nim
    have z_le_x, from zmin x x_in_BlA,
    --i per definici√≥ tenim que x< a pel que obtenim que a < a
    have a_irrefl, from lt_trans (lt_of_lt_of_le a_lt_z z_le_x) x_lt_a,
    exact lt_irrefl ‚ü®a, UA_ss_P ha‚ü© a_irrefl,
  --Aleshores 
  have hAa_eq_UAa_phi:( phi ((phi A A_ss_P)‚Üìa_in_A) Cv_ss_P) = ( phi ((phi (‚ãÉ‚ÇÄùî∏) UA_ss_P)‚Üìha) Cv_ss_P), from subtype.eq Aa_eq_Uùî∏a,
  have UppAa_eq_UppUAa:Upp ( phi ((phi A A_ss_P)‚Üìa_in_A) Cv_ss_P) = Upp ( phi ((phi (‚ãÉ‚ÇÄùî∏) UA_ss_P)‚Üìha) Cv_ss_P), from congr_arg Upp hAa_eq_UAa_phi,
  --Ara, com que A conforme aleshores A‚Üìa √©s cadena
  have Acad:is_chain ( phi ((phi A A_ss_P)‚Üìa_in_A) Cv_ss_P), from cv_is_cad_of_cad (confCad hAconf),
  --aleshores, com A √©s conforme, Upp Aa .pair a ‚àà f
  have UppAa_in_f: (Upp ( phi ((phi A A_ss_P)‚Üìa_in_A) Cv_ss_P)).pair a ‚àà f, from CC2 hAconf,
  --tamb√© tenim que Upp UAa .pair a ‚àà f, per la igualtat que hem demostrat abans
  exact mem_of_eq_of_mem_left UppAa_eq_UppUAa UppAa_in_f,
end

def ùïÇ (f:Set.{u}):Set.{u}:={A‚àà powerset Q| ‚àÉ(h1:A‚äÜ Q), conforme f (phi A h1) }

lemma K_ss_P (f:Set.{u}):ùïÇ Q f ‚äÜ powerset Q:= Œª y hy, (mem_sep.mp hy).left

lemma Echain: is_chain (phi (‚àÖ:Set.{u}) (empty_subset P)):= Œª a b ha, false.elim (not_mem_empty a ha)


lemma UùïÇconf (fFunc:f‚àà (‚ÑÇ P).funs (‚ãÉ‚ÇÄ ‚ÑÇ P)): conforme f (phi (‚ãÉ‚ÇÄ(ùïÇ P f)) (sUnion_A_in_P (K_ss_P P f))):=
begin
  --vegem que tot element de ùïÇ √©s conforme
  have hùî∏: ‚àÄ(A:Set.{u})(hA:A‚àà(ùïÇ P f)), conforme f (phi A (mem_powerset.mp ((K_ss_P P f) hA))), 
    intros A hA,cases (mem_sep.mp hA).right with hA1 hA2, exact hA2,
  --vegem que ùïÇ no √©s buit 
  --com f √©s funci√≥ i Upp ‚àÖ ‚àà ‚ÑÇ P, 
  have Kne:Set_nonempty (ùïÇ P f),
    have UppE_in_C: Upp (phi (‚àÖ:Set.{u}) (empty_subset P)) ‚àà ‚ÑÇ P, 
      have UppE_ss_PP:Upp (phi (‚àÖ:Set.{u}) (empty_subset P))‚äÜ P, exact Œª y hy, (mem_sep.mp hy).left,
      exact mem_sep.mpr (and.intro (mem_powerset.mpr UppE_ss_PP) (exists.intro (phi (‚àÖ:Set.{u}) (empty_subset P)) (and.intro Echain rfl))),
    --aleshores existeix la imatge de f upp ‚àÖ = w 
    
    rcases ((mem_funs.mp fFunc).right (Upp (phi (‚àÖ:Set.{u}) (empty_subset P))) UppE_in_C) with ‚ü®w, hw, wuniq‚ü©, 
    --aleshores vegem que {w} √©s conforme, primer debem veure que w ‚àà P
    have w_in_P:w‚àà P, 
      --com (Upp (phi ‚àÖ _)).pair w ‚àà f ‚äÜ (‚ÑÇ P).prod (‚ãÉ‚ÇÄ ‚ÑÇ P) ‚Üí w‚àà (‚ãÉ‚ÇÄ ‚ÑÇ P) ‚Üí ‚àÉX‚àà ‚ÑÇ P, w‚àà X‚äÜ P
      have w_in_UC:w‚àà (‚ãÉ‚ÇÄ ‚ÑÇ P), from pair_mem_prod_right ((mem_funs.mp fFunc).left hw),
      rcases (mem_sUnion.mp w_in_UC) with ‚ü®X,hX,w_in_X ‚ü©,
      have X_ss_P:X ‚äÜ P, from mem_powerset.mp (mem_sep.mp hX).left,
      exact  X_ss_P w_in_X,
    --aleshores tenim que {w} √©s conforme
    have w_ss_P:{w}‚äÜ P, from mem_of_subsingleton_subset.mpr w_in_P,
    have wconf:conforme f (phi ({w}) w_ss_P),split,
    --‚ä¢ Set_nonempty (phi {w} _).val
      split, exact mem_singleton.mpr rfl,
    --‚ä¢ ‚àÄ (X : Set) (hss : X ‚äÜ (phi {w} _).val), Set_nonempty X ‚Üí (‚àÉ (x : ‚Ü•(P.to_set)) (hx : x.val ‚àà X), minim_of_set (phi X _) x hx)
      intros X hss Xne,
      cases Xne with x hx,
      have x_eq_w, from mem_singleton.mp (hss hx ),
      have x_in_P, from mem_of_eq_of_mem x_eq_w.symm w_in_P,
      have X_ss_P:X‚äÜ P, from Œª y hy, w_ss_P (hss hy),
      have xmin:minim_of_set (phi X (X_ss_P)) ‚ü®x,x_in_P‚ü© hx,
        intros z hz,
        --tenim que z‚àà {w}
        have z_in_w:z=w, from mem_singleton.mp (hss hz),
        have z_in_P, from mem_of_eq_of_mem z_in_w.symm w_in_P,
        have x_in_w:x=w, from mem_singleton.mp (hss hx),
        have x_eq_z1:x=z, from eq.trans x_in_w z_in_w.symm,
        have x_eq_z:‚ü®x, x_in_P‚ü© = ‚ü®z,z_in_P‚ü©, from subtype.eq x_eq_z1,
        exact le_of_eq x_eq_z,
      split,split, exact xmin,
    --‚ä¢ ‚àÄ (x : Set) (hx : x ‚àà (phi {w} w_ss_P).val), (Upp (phi (phi {w} w_ss_P‚Üìhx) Cv_ss_P)).pair x ‚àà f
      intros x hx,
      have x_eq_w:x=w, from mem_singleton.mp hx,
      have ww_eq_E:  ((phi {w} w_ss_P)‚Üìhx) = (‚àÖ:Set.{u}),
        ext z, split, 
        intro hz,
        --com z‚àà {w}‚Üìx tenim que z‚àà w ‚àß z < x
        cases  (mem_cv.mp hz) with z_in_w z_lt_x, 
        --aleshores z < x=w=z
        have x_in_P:x‚àà P, from mem_of_eq_of_mem x_eq_w.symm w_in_P,
        have z_in_P:z‚àà P, from mem_of_eq_of_mem (mem_singleton.mp z_in_w).symm w_in_P,
        have x_eq_z1:x=z, from eq.trans x_eq_w (mem_singleton.mp z_in_w).symm,
        have x_eq_z:‚ü®x,x_in_P‚ü© = ‚ü®z,z_in_P‚ü© ,from subtype.eq x_eq_z1,
        have x_irrefl:‚ü®x,x_in_P‚ü© < ‚ü®x,x_in_P‚ü© ,from lt_of_le_of_lt (le_of_eq x_eq_z) z_lt_x,
        exact false.elim (lt_irrefl ‚ü®x,x_in_P‚ü© x_irrefl),
        exact Œª h, false.elim (not_mem_empty z h),
      --aleshores com hem definit w=Upp (phi (‚àÖ:Set.{u}) (empty_subset P)) volem veure que a√ß√≤ √©s igual a (Upp (phi (phi {w} w_ss_P‚Üìhx) Cv_ss_P))
      have E_eq_ww_v:(phi (‚àÖ:Set.{u}) (empty_subset P))=(phi (phi {w} w_ss_P‚Üìhx) Cv_ss_P), from subtype.eq ww_eq_E.symm,
      have UppE_eq_Uppww:Upp (phi (‚àÖ:Set.{u}) (empty_subset P))=Upp (phi (phi {w} w_ss_P‚Üìhx) Cv_ss_P), exact congr_arg Upp E_eq_ww_v,
      --ara com x=w i Upp ‚àÖ.pair w ‚àà f, obtenim que Upp ‚àÖ.pair x ‚àà f
      exact mem_of_eq_of_mem_right x_eq_w.symm (mem_of_eq_of_mem_left UppE_eq_Uppww hw),
    --aleshores tenim que {w} √©s conforme, pel que ùïÇ no √©s buit,
    split, exact mem_sep.mpr (and.intro (mem_powerset.mpr w_ss_P) (exists.intro w_ss_P wconf)),
  --aleshores, com ùïÇ no √©s buit estem en condicions de aplicar el lmea C i demostrar que ‚ãÉ‚ÇÄùïÇ √©s conforme
  exact LC fFunc (K_ss_P P f) hùî∏ Kne,   
end

lemma Upp_ss_P (C: Œ¶ P): Upp C ‚äÜ P:= Œª y hy, (mem_sep.mp hy).left

lemma UK_ss_P: (sUnion (ùïÇ P f))‚äÜ P:= Œª y hy,sUnion_A_in_P (K_ss_P P f) hy

lemma kuUK_ss_P {k:Set.{u}}(k_in_P:k‚àà P): ({k}‚à™(sUnion (ùïÇ P f)))‚äÜ P:=
begin
  intros y hy,cases (mem_union.mp hy),
  exact mem_of_eq_of_mem (mem_singleton.mp h).symm k_in_P,
  exact UK_ss_P h,
end 

lemma eq_to_upp {A B:Set.{u}}(h1:A‚äÜP)(h2:B‚äÜ P)(hAB:A=B):Upp (phi A h1) = Upp (phi B h2):=
begin
  have hABP:(phi A h1)=(phi B h2), from subtype.eq hAB,
  exact congr_arg Upp hABP,
end


lemma kuUKconf (fFunc:f‚àà (‚ÑÇ P).funs (‚ãÉ‚ÇÄ ‚ÑÇ P)) {k:Set.{u}}(k_in_P:k‚àà P) (hk:‚àÄ (y : Set) (hy : y ‚àà (sUnion (ùïÇ P f))), ‚ü® y,(sUnion_A_in_P (K_ss_P P f)) hy ‚ü© < ‚ü®k,k_in_P‚ü©) (hkf:(Upp (phi (‚ãÉ‚ÇÄ ùïÇ P f) (sUnion_A_in_P (K_ss_P P f)))).pair k ‚àà f): 
conforme f (phi ({k}‚à™(sUnion (ùïÇ P f))) (kuUK_ss_P k_in_P)):=
begin split,
  --‚ä¢ Set_nonempty ({k} ‚à™ ‚ãÉ‚ÇÄ ùïÇ P f)
    --en primer lloc, com k‚àà {k} tenim que no √©s buit
    split, exact mem_union.mpr (or.inl (mem_singleton.mpr rfl)),
  --‚ä¢ ‚àÄ (X : Set) (hss : X ‚äÜ (phi ({k} ‚à™ ‚ãÉ‚ÇÄ ùïÇ P f) _).val), Set_nonempty X ‚Üí (‚àÉ (x : ‚Ü•(P.to_set)) (hx : x.val ‚àà X), minim_of_set (phi X _) x hx)
    intros X hX Xne,
    --separem en dos cassos, X={k}, X ‚â† {k}
    by_cases X_cap_UK_E:X‚à©(sUnion (ùïÇ P f))=(‚àÖ:Set.{u}),
    --si X‚à©(sUnion (ùïÇ P f))=(‚àÖ:Set.{u})--
      --aleshores tot element w de X, w‚àà sUnion (ùïÇ P f) ‚Üí false
      have not_mem_X_UK:‚àÄ{y:Set.{u}}(hy:y‚ààX)(h:y‚ààsUnion (ùïÇ P f)), false,
        intros y hy h, exact not_mem_empty y (mem_of_eq_of_set X_cap_UK_E (mem_inter.mpr (and.intro hy h))),
      split,split,intros w hw,
      --siga w‚àà X, tenim que w‚àà{k} ‚à® w‚àà ‚ãÉùïÇ
      cases (mem_union.mp (hX hw)),
      --si w‚àà{k}
      have k_eq_w:k=w, from (mem_singleton.mp h).symm,
      have k_eq_wP:‚ü®k,k_in_P‚ü©=‚ü®w,(kuUK_ss_P k_in_P) (hX hw)‚ü©, from subtype.eq k_eq_w,
      exact le_of_eq k_eq_wP, swap,
      --com X no √©s buit, aleshores cont√© a k
      cases Xne with y hy, cases (mem_union.mp (hX hy)),
      exact mem_of_eq_of_mem (mem_singleton.mp h) hy,
      exact false.elim (not_mem_X_UK hy h),
      exact false.elim (not_mem_X_UK hw h),
    --si X‚à©(sUnion (ùïÇ P f))‚â†(‚àÖ:Set.{u})--
      --aleshores, com (sUnion (ùïÇ P f)) √©s conforme, tenim que existeix un m√≠nim de X‚à©(sUnion (ùïÇ P f)) 
      rcases (CC1 (UùïÇconf fFunc) (subset_of_inter_right) (nonempty_iff_notEmpty.mpr X_cap_UK_E)) with ‚ü® z,hz,zmin ‚ü©,
      --vegem que aquest z √©s el m√≠nim
      split,split,intros w hw, cases mem_union.mp (hX hw),
      --si w=k, aleshores z ‚â§ k per definici√≥ de k
      have z_lt_k, from hk z.val (mem_inter.mp hz).right,
      have w_in_P:w‚àà P, from mem_of_eq_of_mem (mem_singleton.mp h).symm k_in_P,
      have k_eq_w:‚ü®k,k_in_P‚ü© = ‚ü®w,w_in_P‚ü©, from subtype.eq (mem_singleton.mp h).symm,
      exact le_trans (le_of_lt z_lt_k) (le_of_eq k_eq_w),
      --si w‚àà UK aleshores per def de z tenim que √©s minim
      have z_le_w,from (zmin w (mem_inter.mpr (and.intro hw h))),
      exact le_trans (le_of_eq pieq) z_le_w,
      --i vegem que z‚ààX
      exact (mem_inter.mp hz).left,

  --‚ä¢ ‚àÄ (x : Set) (hx : x ‚àà (phi ({k} ‚à™ ‚ãÉ‚ÇÄ ùïÇ P f) _).val), (Upp (phi (phi ({k} ‚à™ ‚ãÉ‚ÇÄ ùïÇ P f) _‚Üìhx) Cv_ss_P)).pair x ‚àà f
  set UK:=‚ãÉ‚ÇÄ ùïÇ P f,
  intros x hx,
  cases (mem_union.mp hx),
  --si x=k--
    --tenim que x‚àà P
    have x_in_P:x‚ààP, from (kuUK_ss_P k_in_P) hx,
    --tenim que ({k} ‚à™ ‚ãÉ‚ÇÄ ùïÇ P f) _‚Üìhx) = ‚ãÉ‚ÇÄ ùïÇ P f
    have kuUK_eq_UK:((phi ({k} ‚à™ UK) (kuUK_ss_P k_in_P))‚Üìhx) = UK, ext w,split,
    --w ‚àà (phi ({k} ‚à™ UK) _‚Üìhx) ‚Üí w ‚àà UK
      intro hw, cases (mem_cv.mp hw) with w_in_kuUK w_lt_x,
      --com w‚àà ({k} ‚à™ UK) o b√© w=k o w‚àà Uk
      cases mem_union.mp w_in_kuUK with w_in_k w_in_UK,
      --si w‚àà{k} aleshores, com k=x obtenim que x=w
      have x_eq_w:x=w, from eq.trans (mem_singleton.mp h) (mem_singleton.mp w_in_k).symm,
      have x_eq_wP:‚ü®x,x_in_P‚ü© =  ‚ü®w,(kuUK_ss_P k_in_P) w_in_kuUK ‚ü©,from subtype.eq x_eq_w,
      --aleshores x < x
      have x_irrefl:‚ü®x,x_in_P‚ü© < ‚ü®x,x_in_P‚ü©, from lt_of_le_of_lt (le_of_eq x_eq_wP) w_lt_x,
      exact false.elim (lt_irrefl ‚ü®x,x_in_P‚ü© x_irrefl),
      --si w‚àà UK ja ho tenim
      exact  w_in_UK,
    --w ‚àà UK ‚Üí w ‚àà (phi ({k} ‚à™ UK) _‚Üìhx)
      intro hw,
      --com w‚àà UK, aleshores w< k = x 
      have k_eq_xP:‚ü®k,k_in_P‚ü© = ‚ü® x,x_in_P‚ü©, from subtype.eq (mem_singleton.mp h).symm,
      have w_lt_x:‚ü®w,UK_ss_P hw‚ü© < ‚ü®x,x_in_P‚ü© , from lt_of_lt_of_le (hk w hw) (le_of_eq k_eq_xP),
      exact mem_cv.mpr (exists.intro (subset_union_right hw) w_lt_x),
    --Aleshores com {k}‚à™(UK)x= UK ‚Üí Upp ({k}‚à™(UK)x)= Upp (UK), tenim que Upp {k}‚à™(UK) .pair k ‚àà f per hkf
    have kuUK_eq_UKP: Upp (phi ((phi ({k} ‚à™ UK) (kuUK_ss_P k_in_P))‚Üìhx) Cv_ss_P) = Upp (phi UK UK_ss_P), from eq_to_upp Cv_ss_P UK_ss_P kuUK_eq_UK,
    have UppkuUk_k_in_f, from mem_of_eq_of_mem_left kuUK_eq_UKP.symm hkf,
    --i com x = k obtenim el que voliem
    exact mem_of_eq_of_mem_right (mem_singleton.mp h).symm UppkuUk_k_in_f,
  --si x ‚àà UK--
    --en este cas provem que {k}‚à™‚ãÉK‚Üìx= ‚ãÉK‚Üìx
    have kuUKx_eq_UKx:((phi ({k} ‚à™ UK) (kuUK_ss_P k_in_P))‚Üìhx) = ((phi UK UK_ss_P)‚Üìh),ext w,split,
    --w ‚àà (phi ({k} ‚à™ UK) _‚Üìhx) ‚Üí w ‚àà (phi UK UK_ss_P‚Üìh)
      intro hw,cases (mem_cv.mp hw) with w_in_kuUK w_lt_x, cases (mem_union.mp w_in_kuUK),
      --w=k--
        --tenim que w < x < k = w
        have x_lt_k,from hk x h,
        have w_in_P:w‚àà P, from mem_of_eq_of_mem (mem_singleton.mp h_1).symm k_in_P,
        have w_eq_kP:‚ü®w,w_in_P‚ü© = ‚ü®k,k_in_P ‚ü©, from subtype.eq  (mem_singleton.mp h_1),
        have w_irrefl:‚ü®w,w_in_P‚ü© < ‚ü®w,w_in_P‚ü©, from lt_trans w_lt_x (lt_of_lt_of_le x_lt_k (le_of_eq w_eq_kP.symm)),
        exact false.elim (lt_irrefl ‚ü®w,w_in_P‚ü© w_irrefl),
      --w‚àà‚ãÉK‚Üìx--
        apply mem_cv.mpr, split, exact w_lt_x, exact h_1,
    --w ‚àà (phi UK UK_ss_P‚Üìh) ‚Üí w ‚àà (phi ({k} ‚à™ UK) _‚Üìhx)
      intro hw,cases (mem_cv.mp hw) with w_in_UK w_lt_x, exact mem_cv.mpr (exists.intro (mem_union.mpr (or.inr w_in_UK)) w_lt_x),
    --Aleshores, com UK √©s conforme tenim que Upp (UK‚Üìx) .pair x ‚àà f
    have UppkUKx_eq_UppUKx: Upp(phi ((phi ({k} ‚à™ UK) (kuUK_ss_P k_in_P))‚Üìhx) Cv_ss_P) = Upp (phi ((phi UK UK_ss_P)‚Üìh) Cv_ss_P), from eq_to_upp Cv_ss_P Cv_ss_P kuUKx_eq_UKx,
    have UppUKx_x_in_f:(Upp (phi ((phi UK UK_ss_P)‚Üìh) Cv_ss_P)).pair x‚àà f, from CC2 (UùïÇconf fFunc),
    exact mem_of_eq_of_mem_left  UppkUKx_eq_UppUKx.symm UppUKx_x_in_f,
end


  theorem AC_to_Zorn (AC_nd:AxiomOfChoice_noDisj.{u})(ùïè: Set.{u})(hpo: partial_order (ùïè.to_set)): preZorn ùïè hpo:=
  begin
    --Set_nonempty P ‚àß ‚àÄ (C : Set), C ‚àà chains P ‚Üí Set_nonempty C ‚Üí (‚àÉ (s : Set) (H : s ‚àà P), ssuprem_deC)
    intro hprops,
    by_contra hnon_max, 
    --have AC_nd:AxiomOfChoice_noDisj, from AC_equiv_nodisj.mp AC,
    specialize AC_nd (‚ÑÇ ùïè) (C_hasnt_E hprops.left hprops.right hnon_max),rcases AC_nd with ‚ü®F, Ffunc, CFF ‚ü©,
    --aleshores, pel lema UùïÇconf obtenim que ‚ãÉùïÇ √©s conforme 
    have UK_ss_P, from (sUnion_A_in_P (K_ss_P ùïè F)),
    have UKconf:conforme F (phi (‚ãÉ‚ÇÄ(ùïÇ ùïè F)) UK_ss_P), from UùïÇconf Ffunc,
    --definim un acurtament per a Upp ‚ãÉùïÇ
    set UK:=(‚ãÉ‚ÇÄ ùïÇ ùïè F),
    set UppUK:=(Upp (phi UK UK_ss_P)),--(Upp (phi (‚ãÉ‚ÇÄ ùïÇ ùïè F) (sUnion_A_in_P (K_ss_P ùïè F))))
    --per tant Upp UùïÇ ‚àà ‚ÑÇ ùïè, ja que al ser conforme, √©s cadena 

    have UK_in_C:UppUK‚àà ‚ÑÇ ùïè, 
      apply mem_sep.mpr, split, exact mem_powerset.mpr (Upp_ss_P (phi (‚ãÉ‚ÇÄ(ùïÇ ùïè F)) (sUnion_A_in_P (K_ss_P ùïè F)))),split,split, 
      exact confCad UKconf, exact rfl,
    --aleshores, com F √©s funci√≥, existeix un k tal que Upp (phi (‚ãÉ‚ÇÄ(ùïÇ ùïè F)) UK_ss_P).pair k ‚àà F
    rcases (mem_funs.mp Ffunc).right (UppUK) UK_in_C with ‚ü®k, hk,kuniq ‚ü© ,
    --aleshores com que F √©s funci√≥ d'elecci√≥, tenim que k‚àà Upp(‚ãÉ‚ÇÄ(ùïÇ))
    have k_in_UppUK:k ‚àà UppUK, from CFF UppUK k hk,
    --per tant kUppUK := ‚àÄx‚àà UùïÇ, x < k
    cases (mem_sep.mp k_in_UppUK).right with k_in_ùïè kUppUK,
    --per tant k‚àâUùïÇ
    have k_notin_UK:k‚àâUK, 
      intro k_in_UK,
      --aleshores, k < k
      have k_irrefl: ‚ü®k,k_in_ùïè‚ü© < ‚ü®k,k_in_ùïè‚ü©, from kUppUK k k_in_UK,
      exact lt_irrefl ‚ü®k,k_in_ùïè‚ü© k_irrefl,
    -- Ara obtenim que {k}‚à™UK √©s conforme i per tant {k}‚à™UK‚àà ‚ÑÇ ùïè
    have kuUK_in_K: ({k}‚à™ UK)‚àà ùïÇ ùïè F, apply mem_sep.mpr, split, exact mem_powerset.mpr (kuUK_ss_P k_in_ùïè),split, exact kuUKconf Ffunc k_in_ùïè kUppUK hk,
    --aleshores, com k‚àà ({k}‚à™ UK
    have k_in_kuUK:k‚àà ({k}‚à™ UK), from mem_union.mpr (or.inl (mem_singleton.mpr rfl)),
    --tenim que k‚àà UùïÇ
    have k_in_UK:k‚àà UK, from mem_sUnion.mpr (exists.intro ({k}‚à™ UK) (exists.intro kuUK_in_K k_in_kuUK)),
    --aleshores, comabans hem demostrat que k‚àâ UK arribem a una contradficci√≥
    exact k_notin_UK k_in_UK,
  end
end preZorn






open preAC preZorn

theorem AC_eq_Zorn: AxiomOfChoice.{u} ‚Üî Zorn.{u}:=
begin split,
--AC_to_Zorn
  intros AC P hpo,
  exact AC_to_Zorn (AC_equiv_nodisj.mp AC) P hpo,
--Zorn_to_AC
  intros hzorn ùïè ùïè_props,
  exact zorn_to_AC hzorn ùïè_props.left,
end

--podem observar que no es requereix la condici√≥ de que el conjunt de l'axioma d'elecci√≥ siga disjunt

theorem AC_nodisj_eq_Zorn: AxiomOfChoice_noDisj.{u} ‚Üî Zorn.{u}:=
begin split,
--AC_to_Zorn
  intros AC P hpo,
  exact AC_to_Zorn AC P hpo,
--Zorn_to_AC
  intros hzorn ùïè ùïè_props,
  exact zorn_to_AC hzorn ùïè_props,
end